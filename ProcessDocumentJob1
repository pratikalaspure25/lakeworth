public class ProcessDocumentJob implements Queueable, Database.AllowsCallouts {
    private String contentDocumentId;
    private String recordId;
    private Integer retryCount;
    private static final Integer MAX_RETRIES = 10;
    private String ocrResultId;  // Added to store OCR Result ID

    public ProcessDocumentJob(String contentDocumentId, String recordId) {
        this(contentDocumentId, recordId, 0);
    }
    
    private ProcessDocumentJob(String contentDocumentId, String recordId, Integer retryCount) {
        this.contentDocumentId = contentDocumentId;
        this.recordId = recordId;
        this.retryCount = retryCount;
    }

    public void execute(QueueableContext context) {
        try {
            ContentVersion cv = [SELECT Id, Title, VersionData FROM ContentVersion WHERE ContentDocumentId = :contentDocumentId LIMIT 1];
            if (cv == null) {
                System.debug('No ContentVersion found for ContentDocumentId: ' + contentDocumentId);
                return;
            }

            // First time: Trigger OCR processing
            if (retryCount == 0) {
                ocrResultId = triggerOcrProcessing(cv.VersionData);
                if(String.isBlank(ocrResultId)){
                    System.debug('OCR initialization failed.');
                    return;
                }
                System.debug('Initial OCR Result ID: ' + ocrResultId);
            }
            
            // Check status and handle retries
            String status = checkOCRStatus();
            System.debug('Current OCR Status: ' + status);
            
            if (status == 'OCR_ENQUEUE' && retryCount < MAX_RETRIES) {
                // Schedule next retry
                ProcessDocumentJob retryJob = new ProcessDocumentJob(contentDocumentId, recordId, retryCount + 1);
                System.enqueueJob(retryJob, 5); // 5 second delay
                return;
            } else if (status == 'Success') {
                // Process the results
                String extractedText = fetchExtractedText(ocrResultId, contentDocumentId);
                if (String.isNotBlank(extractedText)) {
                    insertNewProfitAndLossRecord(extractedText);
                }
            } else if (retryCount >= MAX_RETRIES) {
                System.debug('Max retries exceeded. Last status: ' + status);
            }

        } catch (Exception e) {
            System.debug('Error processing document: ' + e.getMessage());
        }
    }

    private String triggerOcrProcessing(Blob documentData) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        String endpointUrl = '/services/data/v58.0/actions/standard/initiateTextExtraction';

        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'contentDocumentId' => contentDocumentId,
                    'startPageIndex' => 1,
                    'endPageIndex' => 20,
                    'ocrService' => 'AMAZON_TEXTRACT'
                }
            }
        });

        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        request.setBody(requestBody);

        HttpResponse response = http.send(request);
        System.debug('Initial OCR Response: ' + response.getBody());

        if (response.getStatusCode() == 200) {
            List<Object> responseList = (List<Object>) JSON.deserializeUntyped(response.getBody());
            
            if (responseList != null && !responseList.isEmpty()) {
                Map<String, Object> resultMap = (Map<String, Object>) responseList[0];
                System.debug('Initial Result Map: ' + resultMap);
                
                if (resultMap.containsKey('outputValues')) {
                    Map<String, Object> outputValues = (Map<String, Object>) resultMap.get('outputValues');
                    System.debug('Initial Output Values: ' + outputValues);
                    
                    if (outputValues.containsKey('ocrDocumentScanResultDetails')) {
                        Map<String, Object> ocrDocumentScanResultDetails = 
                            (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');
                        System.debug('Initial OCR Details: ' + ocrDocumentScanResultDetails);
                        
                        if (ocrDocumentScanResultDetails.containsKey('status')) {
                            String status = (String)ocrDocumentScanResultDetails.get('status');
                            System.debug('Initial Status: ' + status);
                        }
                        
                        if (ocrDocumentScanResultDetails.containsKey('ocrDocumentScanResults')) {
                            List<Object> ocrResults = 
                                (List<Object>) ocrDocumentScanResultDetails.get('ocrDocumentScanResults');
                            
                            for (Object ocrResultObj : ocrResults) {
                                Map<String, Object> ocrResult = (Map<String, Object>) ocrResultObj;
                                String resultId = (String) ocrResult.get('ocrDocumentScanResultId');
                                System.debug('OCR Result ID: ' + resultId);
                                
                                if (String.isNotBlank(resultId)) {
                                    return resultId;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        System.debug('Error calling OCR API, status: ' + response.getStatus() + ', body: ' + response.getBody());
        return null;
    }

    private String checkOCRStatus() {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';

        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'contentDocumentId' => contentDocumentId,
                    'ocrDocumentScanResultId' => ocrResultId,
                    'startPageIndex' => 1,
                    'endPageIndex' => 20
                }
            }
        });

        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        request.setBody(requestBody);

        HttpResponse response = http.send(request);
        System.debug('Full Status Response: ' + response.getBody());

        if (response.getStatusCode() == 200) {
            try {
                List<Object> responseList = (List<Object>) JSON.deserializeUntyped(response.getBody());
                if (responseList != null && !responseList.isEmpty()) {
                    Map<String, Object> firstResult = (Map<String, Object>) responseList[0];
                    System.debug('First Result: ' + firstResult);
                    
                    if (firstResult.containsKey('outputValues')) {
                        Map<String, Object> outputValues = (Map<String, Object>) firstResult.get('outputValues');
                        System.debug('Output Values: ' + outputValues);
                        
                        if (outputValues.containsKey('status')) {
                            String status = (String)outputValues.get('status');
                            System.debug('Direct Status: ' + status);
                            return status;
                        }
                        
                        if (outputValues.containsKey('ocrDocumentScanResultDetails')) {
                            Map<String, Object> details = (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');
                            System.debug('OCR Details: ' + details);
                            
                            if (details.containsKey('status')) {
                                String status = (String)details.get('status');
                                System.debug('Found Status: ' + status);
                                return status;
                            }
                            
                            if (details.containsKey('ocrDocumentScanResults')) {
                                List<Object> results = (List<Object>)details.get('ocrDocumentScanResults');
                                if (!results.isEmpty()) {
                                    Map<String, Object> firstScanResult = (Map<String, Object>)results[0];
                                    if (firstScanResult.containsKey('status')) {
                                        String status = (String)firstScanResult.get('status');
                                        System.debug('Scan Result Status: ' + status);
                                        return status;
                                    }
                                }
                            }
                        }
                    }
                }
                
                System.debug('Could not find status in response structure. Full response: ' + response.getBody());
                
            } catch (Exception e) {
                System.debug('Error parsing response: ' + e.getMessage());
                System.debug('Response that caused error: ' + response.getBody());
            }
        }
        
        return 'Unknown';
    }

    private String fetchExtractedText(String ocrDocumentScanResultId, String contentDocumentId) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';

        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'contentDocumentId' => contentDocumentId,
                    'ocrDocumentScanResultId' => ocrDocumentScanResultId,
                    'startPageIndex' => 1,
                    'endPageIndex' => 20
                }
            }
        });

        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        request.setBody(requestBody);

        HttpResponse response = http.send(request);
        System.debug('Extracted Text API response: ' + response.getBody());

        if (response.getStatusCode() == 200) {
            List<Object> responseList = (List<Object>) JSON.deserializeUntyped(response.getBody());
            if (responseList != null && !responseList.isEmpty()) {
                Map<String, Object> firstResult = (Map<String, Object>) responseList[0];
                if (firstResult.containsKey('outputValues')) {
                    Map<String, Object> outputValues = (Map<String, Object>) firstResult.get('outputValues');
                    if (outputValues.containsKey('ocrDocumentScanResultDetails')) {
                        Map<String, Object> details = (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');
                        
                        if (details.containsKey('ocrDocumentScanResults')) {
                            List<Object> results = (List<Object>)details.get('ocrDocumentScanResults');
                            if (!results.isEmpty()) {
                                Map<String, Object> result = (Map<String, Object>)results[0];
                                if (result.containsKey('extractedText')) {
                                    return (String)result.get('extractedText');
                                }
                            }
                        }
                        return JSON.serialize(details);
                    }
                }
            }
        }
        return null;
    }

    private void insertNewProfitAndLossRecord(String ocrResult) {
        try {
            Profit_and_Loss__c newRecord = new Profit_and_Loss__c();
            
            Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(ocrResult);
            
            if (responseMap.containsKey('ocrDocumentScanResultDetails')) {
                List<Map<String, Object>> ocrDetailsList = (List<Map<String, Object>>) responseMap.get('ocrDocumentScanResultDetails');
                
                for (Map<String, Object> ocrDetail : ocrDetailsList) {
                    System.debug('OCR Detail: ' + ocrDetail);
                }
            } else {
                System.debug('No OCR details found in the response.');
            }

            if(String.isNotBlank(recordId)) {
                newRecord.Related_Record__c = recordId;
            }

            insert newRecord;
            System.debug('Inserted Profit_and_Loss__c record with Id: ' + newRecord.Id);

        } catch(Exception ex){
            System.debug('Failed to insert Profit_and_Loss__c record: ' + ex.getMessage());
        }
    }
}
