public class ProcessDocumentJob implements Queueable, Database.AllowsCallouts {
    private String contentDocumentId;
    private String recordId;

    public ProcessDocumentJob(String contentDocumentId, String recordId) {
        this.contentDocumentId = contentDocumentId;
        this.recordId = recordId;
    }

    public void execute(QueueableContext context) {
        try {
            // Retrieve the content of the uploaded file (PDF)
            ContentVersion cv = [SELECT Id, Title, VersionData FROM ContentVersion WHERE ContentDocumentId = :contentDocumentId LIMIT 1];
            if (cv == null) {
                System.debug('No ContentVersion found for ContentDocumentId: ' + contentDocumentId);
                return; // Exit if no record is found
            }

            // Trigger OCR processing and fetch the extracted text using fetchExtractedText
            String ocrResult = triggerOcrProcessing(contentDocumentId);

            if (String.isBlank(ocrResult)) {
                System.debug('OCR result was empty.');
                return;
            }

            // Insert new Profit_and_Loss__c record with extracted data
            insertNewProfitAndLossRecord(ocrResult);

        } catch (Exception e) {
            System.debug('Error processing document: ' + e.getMessage());
        }
    }

    // This method performs HTTP callout to fetch the extracted text from the document
    private String triggerOcrProcessing(String contentDocumentId) {
        try {
            Http http = new Http();
            HttpRequest request = new HttpRequest();

            // Salesforce REST API endpoint to fetch extracted text
            String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';
            
            // Prepare the request body as a JSON string
            String requestBody = JSON.serialize(new Map<String, Object>{
                'inputs' => new List<Map<String, Object>>{
                    new Map<String, Object>{
                        'contentDocumentId' => contentDocumentId,  // Content Document ID
                        'startPageIndex' => 1,  // Default to page 1
                        'endPageIndex' => 20   // You can change the number of pages to extract
                    }
                }
            });

            // Set up the HTTP request
            request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);  // Salesforce base URL with the endpoint
            request.setMethod('POST');
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());  // Using session ID for authorization
            request.setBody(requestBody);

            // Send the HTTP request
            HttpResponse response = http.send(request);

            // Handle the response
            if (response.getStatusCode() == 200) {
                System.debug('OCR API response: ' + response.getBody());
                // Return the response body containing the OCR result
                return response.getBody();
            } else {
                System.debug('Error calling OCR API, status: ' + response.getStatus() + ', body: ' + response.getBody());
                return null;
            }
        } catch (Exception ex) {
            System.debug('Exception during OCR processing: ' + ex.getMessage());
            return null;
        }
    }

    // Insert the extracted data into a custom Salesforce record (e.g., Profit_and_Loss__c)
    private void insertNewProfitAndLossRecord(String ocrResult) {
        try {
            Profit_and_Loss__c newRecord = new Profit_and_Loss__c();

            // Parse the OCR JSON result dynamically into a Map<String,Object>
            Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(ocrResult);

            // Extract OCR details (key-value pairs)
            if (responseMap.containsKey('ocrDocumentScanResultDetails')) {
                List<Map<String, Object>> ocrDetails = (List<Map<String, Object>>) responseMap.get('ocrDocumentScanResultDetails');
                
                for (Map<String, Object> ocrDetail : ocrDetails) {
                    if (ocrDetail.containsKey('keyValuePairs')) {
                        List<Map<String, Object>> keyValuePairs = (List<Map<String, Object>>) ocrDetail.get('keyValuePairs');
                        for (Map<String, Object> pair : keyValuePairs) {
                            String key = (String) pair.get('key');
                            String value = (String) pair.get('value');
                            System.debug('Extracted Key: ' + key + ', Value: ' + value);

                            // Example: Map the extracted key-value pairs to fields in Profit_and_Loss__c
                            if (key == 'Issued On') {
                                newRecord.Issued_On__c = value;
                            } else if (key == 'Date of Birth') {
                                newRecord.Date_of_Birth__c = value;
                            } else if (key == 'Place of Birth') {
                                newRecord.Place_of_Birth__c = value;
                            } else if (key == 'Passport Card no') {
                                newRecord.Passport_Card_no__c = value;
                            } else if (key == 'Given Names') {
                                newRecord.Given_Names__c = value;
                            }
                            // Add additional mappings as necessary based on OCR results
                        }
                    }
                }
            }

            insert newRecord;
            System.debug('Inserted Profit_and_Loss__c record with Id: ' + newRecord.Id);

        } catch (Exception ex) {
            System.debug('Failed to insert Profit_and_Loss__c record: ' + ex.getMessage());
        }
    }
}
