public class ProcessDocumentJob implements Queueable, Database.AllowsCallouts {
    private String contentDocumentId;
    private String recordId;

    public ProcessDocumentJob(String contentDocumentId, String recordId) {
        this.contentDocumentId = contentDocumentId;
        this.recordId = recordId;
    }

    public void execute(QueueableContext context) {
        try {
            // Retrieve the content of the uploaded file (PDF)
            ContentVersion cv = [SELECT Id, Title, VersionData FROM ContentVersion WHERE ContentDocumentId = :contentDocumentId LIMIT 1];
            if (cv == null) {
                System.debug('No ContentVersion found for ContentDocumentId: ' + contentDocumentId);
                return; // Exit if no record is found
            }

            // Trigger OCR processing using Intelligent Document Reader (IDR) - via HTTP callout
            String ocrResult = triggerOcrProcessing(cv.VersionData);

            if (String.isBlank(ocrResult)) {
                System.debug('OCR result was empty.');
                return;
            }

            // Now, Fetch Extracted Text after OCR processing
            String extractedText = fetchExtractedText(contentDocumentId);

            if (String.isBlank(extractedText)) {
                System.debug('No extracted text was found.');
                return;
            }

            // Insert new Profit_and_Loss__c record with extracted data
            insertNewProfitAndLossRecord(extractedText);

        } catch (Exception e) {
            System.debug('Error processing document: ' + e.getMessage());
        }
    }

  // This method performs HTTP callout to the OCR API to trigger text extraction
private String triggerOcrProcessing(Blob documentData) {
    try {
        Http http = new Http();
        HttpRequest request = new HttpRequest();

        // Salesforce REST API endpoint to initiate text extraction
        String endpointUrl = '/services/data/v58.0/actions/standard/initiateTextExtraction';

        // Prepare the request body as a JSON string
        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'contentDocumentId' => contentDocumentId,  // Your uploaded document ID
                    'startPageIndex' => 1,  // Start from page 1
                    'endPageIndex' => 20,  // You can change this based on how many pages you want to extract
                    'ocrService' => 'AMAZON_TEXTRACT'  // Using the Textract OCR service
                }
            }
        });

        // Set up the HTTP request
        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);  // Combine Salesforce base URL with the endpoint
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());  // Use the session ID for authorization
        request.setBody(requestBody);

        // Send the HTTP request
        HttpResponse response = http.send(request);

        // Log the response body for debugging
        System.debug('OCR API response: ' + response.getBody());

        // Handle the response
        if (response.getStatusCode() == 200) {
            // Deserialize the response body to extract the OCR result ID
            List<Object> responseList = (List<Object>) JSON.deserializeUntyped(response.getBody());

            if (responseList != null && !responseList.isEmpty()) {
                Map<String, Object> resultMap = (Map<String, Object>) responseList[0];
                if (resultMap.containsKey('outputValues')) {
                    Map<String, Object> outputValues = (Map<String, Object>) resultMap.get('outputValues');
                    if (outputValues.containsKey('ocrDocumentScanResultDetails')) {
                        Map<String, Object> ocrDocumentScanResultDetails = (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');
                        if (ocrDocumentScanResultDetails.containsKey('ocrDocumentScanResults')) {
                            List<Object> ocrResults = (List<Object>) ocrDocumentScanResultDetails.get('ocrDocumentScanResults');
                            for (Object ocrResultObj : ocrResults) {
                                Map<String, Object> ocrResult = (Map<String, Object>) ocrResultObj;
                                String ocrDocumentScanResultId = (String) ocrResult.get('ocrDocumentScanResultId');
                                System.debug('OCR Document Scan Result ID: ' + ocrDocumentScanResultId);

                                // Fetch the extracted text now
                                String extractedText = fetchExtractedText(ocrDocumentScanResultId);
                                System.debug('Extracted Text: ' + extractedText);
                            }
                        }
                    }
                }
            }

        } else {
            System.debug('Error calling OCR API, status: ' + response.getStatus() + ', body: ' + response.getBody());
            return null;
        }
    } catch (Exception ex) {
        System.debug('Exception during OCR processing: ' + ex.getMessage());
        return null;
    }
}





// This method fetches the extracted text using the fetchExtractedText API
private String fetchExtractedText(String ocrDocumentScanResultId) {
    try {
        Http http = new Http();
        HttpRequest request = new HttpRequest();

        // Salesforce REST API endpoint to fetch extracted text using the OCR result ID
        String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';

        // Prepare the request body as a JSON string
        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'ocrDocumentScanResultId' => ocrDocumentScanResultId,  // OCR result ID obtained from the first step
                    'startPageIndex' => 1,  // Start from page 1
                    'endPageIndex' => 20   // You can change the number of pages to extract
                }
            }
        });

        // Set up the HTTP request
        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);  // Combine Salesforce base URL with the endpoint
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());  // Use the session ID for authorization
        request.setBody(requestBody);

        // Send the HTTP request
        HttpResponse response = http.send(request);

        // Handle the response
        if (response.getStatusCode() == 200) {
            System.debug('Extracted Text API response: ' + response.getBody());

            // Deserialize the response body into a List of Maps to handle the array properly
            List<Map<String, Object>> responseList = (List<Map<String, Object>>) JSON.deserializeUntyped(response.getBody());

            // Check if responseList is not empty
            if (!responseList.isEmpty()) {
                Map<String, Object> firstResult = responseList.get(0);
                System.debug('Extracted Text: ' + firstResult);
                return firstResult.toString(); // You can further process the data if needed
            } else {
                System.debug('No extracted text found.');
                return null;
            }
        } else {
            System.debug('Error calling Extracted Text API, status: ' + response.getStatus() + ', body: ' + response.getBody());
            return null;
        }
    } catch (Exception ex) {
        System.debug('Exception during Fetch Extracted Text: ' + ex.getMessage());
        return null;
    }
}



    private void insertNewProfitAndLossRecord(String extractedText) {
        try {
            Profit_and_Loss__c newRecord = new Profit_and_Loss__c();

            // Parse the OCR JSON result dynamically into a Map<String,Object>
            Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(extractedText);

            // Extract fields safely â€“ customize keys based on your OCR JSON structure
            if (responseMap.containsKey('ocrDocumentScanResultDetails')) {
                List<Map<String, Object>> ocrDetails = (List<Map<String, Object>>) responseMap.get('ocrDocumentScanResultDetails');
                
                for (Map<String, Object> ocrDetail : ocrDetails) {
                    if (ocrDetail.containsKey('keyValuePairs')) {
                        List<Map<String, Object>> keyValuePairs = (List<Map<String, Object>>) ocrDetail.get('keyValuePairs');
                        
                        for (Map<String, Object> pair : keyValuePairs) {
                            String key = (String) pair.get('key');
                            String value = (String) pair.get('value');
                            System.debug('Extracted Key: ' + key + ', Value: ' + value);

                            // Map the extracted key-value pairs to fields in Profit_and_Loss__c
                            if (key == 'Issued On') {
                                newRecord.Issued_On__c = value;
                            } else if (key == 'Date of Birth') {
                                newRecord.Date_of_Birth__c = value;
                            } else if (key == 'Place of Birth') {
                                newRecord.Place_of_Birth__c = value;
                            } else if (key == 'Passport Card no') {
                                newRecord.Passport_Card_no__c = value;
                            } else if (key == 'Given Names') {
                                newRecord.Given_Names__c = value;
                            }
                            // Add additional mappings as necessary based on OCR results
                        }
                    }
                }
            }

            insert newRecord;
            System.debug('Inserted Profit_and_Loss__c record with Id: ' + newRecord.Id);

        } catch (Exception ex) {
            System.debug('Failed to insert Profit_and_Loss__c record: ' + ex.getMessage());
        }
    }
}
