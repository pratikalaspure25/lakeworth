async handleSave() {
    try {
        // Always set parent ApplicationFormId
        this.editData.ApplicationFormId = this.recordId;

        console.log('üì§ Saving applicant:', JSON.stringify(this.editData));

        const result = await saveApplicant({ applicant: this.editData });

        this.formData = { ...result };
        this.editData = { ...result };
        this.isReadOnly = true;

        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: 'Applicant saved successfully',
                variant: 'success'
            })
        );
    } catch (error) {
        console.error('‚ùå Save error:', error);
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Error saving applicant',
                message: error?.body?.message || error.message,
                variant: 'error'
            })
        );
    }
}

public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c, role__c
            FROM Account
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String role;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c, Role__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm app = [
            SELECT Id, AccountId 
            FROM ApplicationForm
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name, Company_Name__c,Role,DBA__c,Legal_Entity__c,Industry__c,Employees__c,Annual_Revenue__c, Net_Profit__c from Applicant
            WHERE ApplicationFormId = :appFormId
        ];
    }

    // Create new Applicant
    @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant app = new Applicant();
        app.ApplicationFormId = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }

    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }

 @AuraEnabled
    public static void updateApplicant(Id applicantId, Map<String, Object> fields) {
        Applicant app = new Applicant(Id = applicantId);
        for (String key : fields.keySet()) {
            SObjectField sf = Applicant.SObjectType.getDescribe().fields.getMap().get(key);
            if (sf != null) {
                app.put(sf, fields.get(key));
            }
        }
        update app;
    }

  public static void saveApplicant(Applicant applicant) {
        // Make sure ApplicationForm__c is required
        if (applicant.ApplicationFormId == null) {
            throw new AuraHandledException('ApplicationForm Id is required.');
        }
        upsert applicant;
    }
}

 @api recordId;          // ApplicationForm Id (passed from parent/record page)
    @api formData = {};     // Read-only data
    @track editData = {};   // Editable form data
    @track isReadOnly = true;

    handleEdit() {
        this.editData = { ...this.formData };
        this.isReadOnly = false;
    }

    handleCancel() {
        this.isReadOnly = true;
    }

    handleInputChange(event) {
        const field = event.target.dataset.field;
        this.editData = { ...this.editData, [field]: event.target.value };
    }

    async handleSave() {
        try {
            // attach ApplicationForm Id before sending to Apex
            this.editData.ApplicationForm__c = this.recordId;

            console.log('Saving applicant:', JSON.stringify(this.editData));

            await saveApplicant({ applicant: this.editData });

            this.formData = { ...this.editData };
            this.isReadOnly = true;

            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Applicant saved successfully',
                    variant: 'success'
                })
            );
        } catch (error) {
            console.error('Save Error:', error);
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error saving applicant',
                    message: error?.body?.message || JSON.stringify(error),
                    variant: 'error'
                })
            );
        }
    }

   @AuraEnabled
    public static void saveApplicant(Applicant__c applicant) {
        // Make sure ApplicationForm__c is required
        if (applicant.ApplicationForm__c == null) {
            throw new AuraHandledException('ApplicationForm Id is required.');
        }
        upsert applicant;
    }

async handleSave() {
    try {
        console.log('Sending data to Apex:', JSON.stringify(this.editData));

        await saveApplicant({ applicant: this.editData });

        this.formData = { ...this.editData };
        this.isReadOnly = true;

        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: 'Applicant updated successfully',
                variant: 'success'
            })
        );
    } catch (error) {
        console.error('Save Error:', error);   // üëà This will show the exact Apex error

        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Error saving applicant',
                message: error?.body?.message || JSON.stringify(error),
                variant: 'error'
            })
        );
    }
}



import saveApplicant from '@salesforce/apex/ApplicantController.saveApplicant';

  @api formData = {};     // Read-only data (comes from parent)
    @track editData = {};   // Editable data
    @track isReadOnly = true;

    // Switch to edit mode
    handleEdit() {
        this.editData = { ...this.formData }; // clone current data
        this.isReadOnly = false;
    }

    // Cancel edit
    handleCancel() {
        this.isReadOnly = true;
    }

    // Update editData as user types
    handleInputChange(event) {
        const field = event.target.dataset.field;
        this.editData = { ...this.editData, [field]: event.target.value };
    }

    // Save to Apex
    async handleSave() {
        try {
            // send to Apex (make sure editData contains the Applicant Id)
            await saveApplicant({ applicant: this.editData });

            // update read-only form with new values
            this.formData = { ...this.editData };
            this.isReadOnly = true;

            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Applicant updated successfully',
                    variant: 'success'
                })
            );
        } catch (error) {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error saving applicant',
                    message: error.body?.message || error.message,
                    variant: 'error'
                })
            );
        }
    }

 @AuraEnabled
    public static void saveApplicant(Applicant__c applicant) {
        upsert applicant;
    }

 <lightning-card title="Borrowers / Guarantors">

    <!-- Read Only Form -->
    <template if:true={isReadOnly}>
         <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Role" value={formData.role} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={formData.employees} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} readonly></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} readonly></lightning-textarea>
        </div>

        <div class="slds-m-around_medium">
            <lightning-button variant="brand" label="Edit" onclick={handleEdit}></lightning-button>
        </div>
    </template>

    <!-- Editable Form -->
    <template if:false={isReadOnly}>
        <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={editData.companyName} onchange={handleInputChange} data-field="companyName"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Role" value={editData.role} onchange={handleInputChange} data-field="role"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={editData.dba} onchange={handleInputChange} data-field="dba"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={editData.industry} onchange={handleInputChange} data-field="industry"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={editData.employees} onchange={handleInputChange} data-field="employees"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={editData.annualRevenue} onchange={handleInputChange} data-field="annualRevenue"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={editData.netProfit} onchange={handleInputChange} data-field="netProfit"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={editData.legalEntity} onchange={handleInputChange} data-field="legalEntity"></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={editData.comment} onchange={handleInputChange} data-field="comment"></lightning-textarea>
        </div>

        <div class="slds-m-around_medium">
            <lightning-button variant="neutral" label="Cancel" onclick={handleCancel}></lightning-button>
            <lightning-button class="slds-m-left_small" variant="brand" label="Save" onclick={handleSave}></lightning-button>
        </div>
    </template>

</lightning-card>



<lightning-card title="Borrowers / Guarantors">

    <!-- Read Only Form -->
    <template if:true={isReadOnly}>
        <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Role" value={formData.role} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={formData.employees} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} readonly></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} readonly></lightning-textarea>
        </div>

        <div class="slds-m-around_medium">
            <lightning-button variant="brand" label="Edit" onclick={handleEdit}></lightning-button>
        </div>
    </template>

    <!-- Editable Form -->
    <template if:false={isReadOnly}>
        <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={editData.companyName} onchange={handleInputChange} data-field="companyName"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Role" value={editData.role} onchange={handleInputChange} data-field="role"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={editData.dba} onchange={handleInputChange} data-field="dba"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={editData.industry} onchange={handleInputChange} data-field="industry"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={editData.employees} onchange={handleInputChange} data-field="employees"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={editData.annualRevenue} onchange={handleInputChange} data-field="annualRevenue"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={editData.netProfit} onchange={handleInputChange} data-field="netProfit"></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={editData.legalEntity} onchange={handleInputChange} data-field="legalEntity"></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={editData.comment} onchange={handleInputChange} data-field="comment"></lightning-textarea>
        </div>

        <div class="slds-m-around_medium">
            <lightning-button variant="neutral" label="Cancel" onclick={handleCancel}></lightning-button>
            <lightning-button class="slds-m-left_small" variant="brand" label="Save" onclick={handleSave}></lightning-button>
        </div>
    </template>

</lightning-card>


 @api formData; // comes from parent (read-only)
    @track editData = {}; // for editable form
    @track isReadOnly = true;

    handleEdit() {
        // copy formData into editData for editing
        this.editData = { ...this.formData };
        this.isReadOnly = false;
    }

    handleCancel() {
        this.isReadOnly = true;
    }

    handleInputChange(event) {
        const field = event.target.dataset.field;
        this.editData[field] = event.target.value;
    }

    async handleSave() {
        try {
            // Call Apex to save/update Applicant
            await saveApplicant({ applicant: this.editData });

            // refresh UI
            this.formData = { ...this.editData };
            this.isReadOnly = true;

            // Show toast
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Applicant updated successfully',
                    variant: 'success'
                })
            );
        } catch (error) {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error updating record',
                    message: error.body.message,
                    variant: 'error'
                })
            );
        }
    }



  <lightning-card title="Borrowers / Guarantors">

        <!-- Read-only view -->
        <template if:true={isViewMode}>
            <div class="slds-grid slds-wrap slds-m-around_medium">
                <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Role" value={formData.role} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Employees" value={formData.employees} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} readonly></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} readonly></lightning-input>
                <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} readonly></lightning-textarea>
            </div>

            <div class="slds-m-around_medium">
                <lightning-button label="Edit" onclick={handleEdit}></lightning-button>
            </div>
        </template>

        <!-- Edit mode -->
        <template if:false={isViewMode}>
            <div class="slds-grid slds-wrap slds-m-around_medium">
                <lightning-input class="slds-size_1-of-2" label="Company Name" value={editData.companyName} onchange={handleChange} data-field="companyName"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Role" value={editData.role} onchange={handleChange} data-field="role"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="DBA" value={editData.dba} onchange={handleChange} data-field="dba"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Industry" value={editData.industry} onchange={handleChange} data-field="industry"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Employees" value={editData.employees} onchange={handleChange} data-field="employees"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={editData.annualRevenue} onchange={handleChange} data-field="annualRevenue"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Net Profit" value={editData.netProfit} onchange={handleChange} data-field="netProfit"></lightning-input>
                <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={editData.legalEntity} onchange={handleChange} data-field="legalEntity"></lightning-input>
                <lightning-textarea class="slds-size_1-of-1" label="Comment" value={editData.comment} onchange={handleChange} data-field="comment"></lightning-textarea>
            </div>

            <div class="slds-m-around_medium">
                <lightning-button variant="brand" label="Save" onclick={handleSave}></lightning-button>
                <lightning-button variant="neutral" label="Cancel" onclick={handleCancel}></lightning-button>
            </div>
        </template>
    </lightning-card>


import updateApplicant from '@salesforce/apex/ApplicantController.updateApplicant';

 handleEdit() {
        this.editData = { ...this.formData }; // clone for editing
        this.isViewMode = false;
    }

 handleChange(event) {
        const field = event.target.dataset.field;
        this.editData[field] = event.target.value;
    }

    handleSave() {
        updateApplicant({ applicantId: this.recordId, fields: this.editData })
            .then(() => {
                this.formData = { ...this.editData };
                this.isViewMode = true;
            })
            .catch(error => {
                console.error('Error updating applicant:', error);
            });
    }
}

   @AuraEnabled
    public static void updateApplicant(Id applicantId, Map<String, Object> fields) {
        Applicant__c app = new Applicant__c(Id = applicantId);
        for (String key : fields.keySet()) {
            SObjectField sf = Applicant__c.SObjectType.getDescribe().fields.getMap().get(key);
            if (sf != null) {
                app.put(sf, fields.get(key));
            }
        }
        update app;
    }

 <lightning-card title="Borrowers / Guarantors">

        <!-- Account Search -->
            <!-- <div class="slds-m-around_medium">
                <lightning-input 
                    label="Search Account"
                    type="text"
                    value={searchKey}
                    onchange={handleSearchKeyChange}
                    placeholder="Type account name...">
                </lightning-input>

                <template if:true={searchResults.length}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={searchResults} for:item="acc">
                            <div key={acc.Id} 
                                class="slds-p-around_x-small slds-border_bottom" 
                                onclick={handleAccountSelect} 
                                data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>
            </div> -->

        <!-- Account Fields (prefill from AppForm / lookup) -->
        <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Role" value={formData.role} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={formData.employees} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} readonly></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} readonly></lightning-textarea>
        </div>

    </lightning-card>


Compilation Failure partyDetails.js:32,2 : LWC1535: Unexpected plugin compilation error: Plugin - lwc, Hook - transform, Cause - SyntaxError: /home/sfdc/tools/sfdc-lwc-compiler/13.33554432.12582912/partyDetails.js: LWC1102: Invalid 'wire' decorator usage. Supported decorators (api, wire, track) should be imported from "lwc" 30 | 31 | // Fetch Account object info > 32 | @wire(getObjectInfo, { | ^ 33 | objectApiName: ACCOUNT_OBJECT 34 | }) 35 | objectInfo;: Source

import { LightningElement, track, wire } from 'lwc';
import { getObjectInfo, getPicklistValuesByRecordType } from 'lightning/uiObjectInfoApi';
import ACCOUNT_OBJECT from '@salesforce/schema/Account';

export default class AddApplicantForm extends LightningElement {
    @track newApplicant = {};
    @track industryOptions = [];
    @track legalEntityOptions = [];
    @track roleOptions = [];

    // Fetch Account object info
    @wire(getObjectInfo, { objectApiName: ACCOUNT_OBJECT })
    objectInfo;

    // Fetch picklist values dynamically from Account object
    @wire(getPicklistValuesByRecordType, { objectApiName: ACCOUNT_OBJECT, recordTypeId: '$objectInfo.data.defaultRecordTypeId' })
    wiredPicklistValues({ data, error }) {
        if (data) {
            this.industryOptions = data.picklistFieldValues.Industry.values;
            this.legalEntityOptions = data.picklistFieldValues.Legal_Entity__c.values;
            this.roleOptions = data.picklistFieldValues.Role__c.values;
        }
        if (error) {
            console.error(error);
        }
    }
}


  @track industryOptions = [];
    @track legalEntityOptions = [];
    @track roleOptions = [];

    // Fetch Account object info
    @wire(getObjectInfo, { objectApiName: ACCOUNT_OBJECT })
    objectInfo;

    // Fetch picklist values dynamically from Account object
    @wire(getPicklistValuesByRecordType, { objectApiName: ACCOUNT_OBJECT, recordTypeId: '$objectInfo.data.defaultRecordTypeId' })
    wiredPicklistValues({ data, error }) {
        if (data) {
            this.industryOptions = data.picklistFieldValues.Industry.values;
            this.legalEntityOptions = data.picklistFieldValues.Legal_Entity__c.values;
            this.roleOptions = data.picklistFieldValues.Role__c.values;
        }
        if (error) {
            console.error(error);
        }
    }
}
handleNewApplicantAccountSelect(event) {
    const selectedId = event.currentTarget.dataset.id;
    const selectedAccount = this.newApplicant.searchResults.find(acc => acc.Id === selectedId);

    if (selectedAccount) {
        this.newApplicant = {
            ...this.newApplicant,
            AccountId: selectedAccount.Id,
            Company_Name__c: selectedAccount.Name,
            DBA__c: selectedAccount.DBA__c || '',
            Industry__c: selectedAccount.Industry || '',
            Employees__c: selectedAccount.NumberOfEmployees || '',
            Annual_Revenue__c: selectedAccount.AnnualRevenue || '',
            Net_Profit__c: selectedAccount.Net_Profit__c || '',
            Legal_Entity__c: selectedAccount.Legal_Entity__c || '',
            Role__c: selectedAccount.Role__c || '',
            Comments__c: '',
            searchResults: [],
            searchKey: selectedAccount.Name
        };
    }
}



<lightning-combobox label="Industry" 
                    value={newApplicant.Industry__c} 
                    options={industryOptions} 
                    placeholder="Select Industry" 
                    onchange={handleNewApplicantFieldChange} 
                    data-field="Industry__c">
</lightning-combobox>

<lightning-combobox label="Legal Entity" 
                    value={newApplicant.Legal_Entity__c} 
                    options={legalEntityOptions} 
                    placeholder="Select Legal Entity" 
                    onchange={handleNewApplicantFieldChange} 
                    data-field="Legal_Entity__c">
</lightning-combobox>

<lightning-combobox label="Role" 
                    value={newApplicant.Role__c} 
                    options={roleOptions} 
                    placeholder="Select Role" 
                    onchange={handleNewApplicantFieldChange} 
                    data-field="Role__c">
</lightning-combobox>


<lightning-combobox class="slds-size_1-of-2" label="Role" 
                                    value={newApplicant.Role__c} 
                                    placeholder="Select Role" 
                                    options={roleOptions} 
                                    onchange={handleNewApplicantFieldChange} 
                                    data-field="Role__c">
                </lightning-combobox>

  <lightning-combobox class="slds-size_1-of-2" label="Industry" 
                                    value={newApplicant.Industry__c} 
                                    placeholder="Select Industry" 
                                    options={industryOptions} 
                                    onchange={handleNewApplicantFieldChange} 
                                    data-field="Industry__c">
                </lightning-combobox>

  <lightning-combobox class="slds-size_1-of-2" label="Legal Entity" 
                                    value={newApplicant.Legal_Entity__c} 
                                    placeholder="Select Legal Entity" 
                                    options={legalEntityOptions} 
                                    onchange={handleNewApplicantFieldChange} 
                                    data-field="Legal_Entity__c">
                </lightning-combobox>

@wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName: INDUSTRY_FIELD })
wiredIndustry({ data }) { if (data) this.industryOptions = data.values; }

@wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName: LEGAL_ENTITY_FIELD })
wiredLegalEntity({ data }) { if (data) this.legalEntityOptions = data.values; }

@wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName: ROLE_FIELD })
wiredRole({ data }) { if (data) this.roleOptions = data.values; }

handleNewApplicantAccountSelect(event) {
    const selectedId = event.currentTarget.dataset.id;
    const selectedAccount = this.newApplicant.searchResults.find(acc => acc.Id === selectedId);

    if (selectedAccount) {
        // Assign picklist only if value exists in options
        const industryValue = this.industryOptions.find(opt => opt.value === selectedAccount.Industry)?.value || '';
        const legalEntityValue = this.legalEntityOptions.find(opt => opt.value === selectedAccount.Legal_Entity__c)?.value || '';
        const roleValue = this.roleOptions.find(opt => opt.value === selectedAccount.Role__c)?.value || '';

        this.newApplicant = {
            ...this.newApplicant,
            AccountId: selectedAccount.Id,
            Company_Name__c: selectedAccount.Name,
            DBA__c: selectedAccount.DBA__c || '',
            Industry__c: industryValue,
            Employees__c: selectedAccount.NumberOfEmployees || '',
            Annual_Revenue__c: selectedAccount.AnnualRevenue || '',
            Net_Profit__c: selectedAccount.Net_Profit__c || '',
            Legal_Entity__c: legalEntityValue,
            Role__c: roleValue,
            Comments__c: ''
        };

        this.newApplicant.searchResults = [];
        this.newApplicant.searchKey = selectedAccount.Name;
    }
}

<!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_small"></lightning-button>

    <!-- New Applicant Section -->
    <template if:true={newApplicant}>
        <div class="slds-box slds-m-around_medium">
            <lightning-card title="New Applicant">
                <!-- Account Lookup -->
                <lightning-input label="Search Account" type="text" value={newApplicant.searchKey} onchange={handleNewApplicantSearchKeyChange} placeholder="Type account name...">
                </lightning-input>
                <template if:true={newApplicant.searchResults}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={newApplicant.searchResults} for:item="acc">
                            <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" onclick={handleNewApplicantAccountSelect} data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={newApplicant.Company_Name__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Role" value={newApplicant.role} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={newApplicant.DBA__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={newApplicant.Industry__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" value={newApplicant.Employees__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={newApplicant.Annual_Revenue__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={newApplicant.Net_Profit__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={newApplicant.Legal_Entity__c} onchange={handleNewApplicantFieldChange}></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comments" value={newApplicant.Comments__c} onchange={handleNewApplicantFieldChange}></lightning-textarea>
                </div>
            </lightning-card>
        </div>
    </template>

<!-- Applicant Details -->
<div class="slds-grid slds-wrap slds-m-around_medium">
    <lightning-input class="slds-size_1-of-2" label="Company Name" value={newApplicant.Company_Name__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="DBA" value={newApplicant.DBA__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="Industry" value={newApplicant.Industry__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="Employees" value={newApplicant.Employees__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={newApplicant.Annual_Revenue__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={newApplicant.Net_Profit__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={newApplicant.Legal_Entity__c} onchange={handleNewApplicantFieldChange}></lightning-input>
    <lightning-textarea class="slds-size_1-of-1" label="Comments" value={newApplicant.Comments__c} onchange={handleNewApplicantFieldChange}></lightning-textarea>
</div>

handleNewApplicantFieldChange(event) {
    const field = event.target.label.replace(/ /g, '_'); // replace spaces with underscores
    this.newApplicant = { ...this.newApplicant, [field]: event.target.value };
}

handleNewApplicantAccountSelect(event) {
    const selectedId = event.currentTarget.dataset.id;
    const selectedAccount = this.newApplicant.searchResults.find(acc => acc.Id === selectedId);
    if (selectedAccount) {
        this.newApplicant = {
            ...this.newApplicant,
            AccountId: selectedAccount.Id,
            Company_Name__c: selectedAccount.Name,
            DBA__c: selectedAccount.DBA__c || '',
            Industry__c: selectedAccount.Industry || '',
            Employees__c: selectedAccount.NumberOfEmployees || '',
            Annual_Revenue__c: selectedAccount.AnnualRevenue || '',
            Net_Profit__c: selectedAccount.Net_Profit__c || '',
            Legal_Entity__c: selectedAccount.Legal_Entity__c || '',
            Comments__c: ''
        };

        // Clear search results after selection
        this.newApplicant.searchResults = [];
        this.newApplicant.searchKey = selectedAccount.Name;
    }
}


 <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_small"></lightning-button>

    <!-- New Applicant Section -->
    <template if:true={newApplicant}>
        <div class="slds-box slds-m-around_medium">
            <lightning-card title="New Applicant">
                <!-- Account Lookup -->
                <lightning-input label="Search Account" type="text" value={newApplicant.searchKey} onchange={handleNewApplicantSearchKeyChange} placeholder="Type account name...">
                </lightning-input>
                <template if:true={newApplicant.searchResults}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={newApplicant.searchResults} for:item="acc">
                            <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" onclick={handleNewApplicantAccountSelect} data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={newApplicant.Company_Name__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={newApplicant.DBA__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={newApplicant.Industry__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" value={newApplicant.Employees__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={newApplicant.Annual_Revenue__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={newApplicant.Net_Profit__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={newApplicant.Legal_Entity__c} disabled></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comments" value={newApplicant.Comments__c} disabled></lightning-textarea>
                </div>
            </lightning-card>
        </div>
    </template>

<template if:true={applicants.length}>
    <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.Id} class="slds-box slds-m-around_medium">
            <lightning-card title="Borrower / Guarantor">
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name"
                                     value={applicant.Company_Name__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Company_Name__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" 
                                     value={applicant.DBA__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="DBA__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" 
                                     value={applicant.Industry__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Industry__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" 
                                     value={applicant.Employees__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Employees__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" 
                                     value={applicant.Annual_Revenue__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Annual_Revenue__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" 
                                     value={applicant.Net_Profit__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Net_Profit__c">
                    </lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" 
                                     value={applicant.Legal_Entity__c} 
                                     onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Legal_Entity__c">
                    </lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comments" 
                                        value={applicant.Comments__c} 
                                        onchange={handleExistingApplicantChange} data-id={applicant.Id} data-field="Comments__c">
                    </lightning-textarea>
                </div>
            </lightning-card>
        </div>
    </template>
</template>

import searchAccounts from '@salesforce/apex/ApplicantController.searchAccounts';

handleNewApplicantSearchKeyChange(event) {
    this.newApplicant.searchKey = event.target.value;

    if(this.newApplicant.searchKey.length > 2){
        searchAccounts({ searchKey: this.newApplicant.searchKey })
        .then(result => {
            this.newApplicant.searchResults = result;
        })
        .catch(error => {
            this.newApplicant.searchResults = [];
            console.error(error);
        });
    } else {
        this.newApplicant.searchResults = [];
    }
}

handleNewApplicantAccountSelect(event) {
    const selectedId = event.currentTarget.dataset.id;
    const selectedAccount = this.newApplicant.searchResults.find(acc => acc.Id === selectedId);
    if(selectedAccount) {
        this.newApplicant.Company_Name__c = selectedAccount.Name;
        this.newApplicant.Industry__c = selectedAccount.Industry;
        this.newApplicant.Employees__c = selectedAccount.NumberOfEmployees;
        this.newApplicant.Annual_Revenue__c = selectedAccount.AnnualRevenue;
        this.newApplicant.Net_Profit__c = selectedAccount.Net_Profit__c;
        this.newApplicant.Legal_Entity__c = selectedAccount.Legal_Entity__c;
        this.newApplicant.AccountId = selectedAccount.Id;

        // Clear search results
        this.newApplicant.searchResults = [];
        this.newApplicant.searchKey = selectedAccount.Name;
    }
}


 <!-- Existing Applicants -->
    <template if:true={applicants.length}>
        <template for:each={applicants} for:item="applicant">
            <div key={applicant.Id} class="slds-box slds-m-around_medium">
                <lightning-card title="Borrower / Guarantor">
                    <!-- Account info prefilled -->
                    <div class="slds-grid slds-wrap slds-m-around_medium">
                        <lightning-input class="slds-size_1-of-2" label="Company Name" value={applicant.Company_Name__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="DBA" value={applicant.DBA__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Industry" value={applicant.Industry__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Employees" value={applicant.Employees__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={applicant.Annual_Revenue__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Net Profit" value={applicant.Net_Profit__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={applicant.Legal_Entity__c} disabled>
                        </lightning-input>
                        <lightning-textarea class="slds-size_1-of-1" label="Comments" value={applicant.Comments__c} disabled>
                        </lightning-textarea>
                    </div>
                </lightning-card>
            </div>
        </template>
    </template>

    <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_small"></lightning-button>

    <!-- New Applicant Section -->
    <template if:true={newApplicant}>
        <div class="slds-box slds-m-around_medium">
            <lightning-card title="New Applicant">
                <!-- Account Lookup -->
                <lightning-input label="Search Account" type="text" value={newApplicant.searchKey} onchange={handleNewApplicantSearchKeyChange} placeholder="Type account name...">
                </lightning-input>
                <template if:true={newApplicant.searchResults}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={newApplicant.searchResults} for:item="acc">
                            <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" onclick={handleNewApplicantAccountSelect} data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={newApplicant.Company_Name__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={newApplicant.DBA__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={newApplicant.Industry__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" value={newApplicant.Employees__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={newApplicant.Annual_Revenue__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={newApplicant.Net_Profit__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={newApplicant.Legal_Entity__c} disabled></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comments" value={newApplicant.Comments__c} disabled></lightning-textarea>
                </div>
            </lightning-card>
        </div>
    </template>



import { LightningElement, track, api } from 'lwc';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import getAccountDetailsFromAppForm from '@salesforce/apex/PartyDetailsController.getAccountDetailsFromAppForm';
import getApplicantsFromAppForm from '@salesforce/apex/PartyDetailsController.getApplicantsFromAppForm';
import { OmniscriptBaseMixin } from 'omnistudio/omniscriptBaseMixin';

export default class PartyDetails extends OmniscriptBaseMixin(LightningElement) {
    @api recordId; // ApplicationForm Id
    @track searchKey = '';
    @track searchResults = [];
    @track formData = {};
    @track selectedAccountId;
    @track applicants = [];
    @track newApplicant = null;

    connectedCallback() {
        if (this.recordId) {
            this.prefillFromAppForm();
            if(this.recordId)this.loadApplicants();
        }
    }

    async prefillFromAppForm() {
        try {
            const accountDetails = await getAccountDetailsFromAppForm({ appFormId: this.recordId });
            this.formData = { ...accountDetails };
            this.selectedAccountId = accountDetails.id;
        } catch (error) {
            console.error('Error prefill:', error);
        }
    }

     async loadApplicants() {
        try {
            this.applicants = await getApplicantsFromAppForm({ appFormId: this.recordId });
        } catch (error) {
            console.error('Error fetching applicants', error);
        }
    }

    addApplicant() {
        this.newApplicant = {
            searchKey: '',
            searchResults: [],
            Company_Name__c: '',
            DBA__c: '',
            Industry__c: '',
            Employees__c: null,
            Annual_Revenue__c: '',
            Net_Profit__c: '',
            Legal_Entity__c: '',
            Comments__c: ''
        };
    }

    handleNewApplicantSearchKeyChange(event) {
        const searchKey = event.target.value;
        this.newApplicant.searchKey = searchKey;
        if (searchKey.length > 1) {
            this.findAccounts(searchKey);
        } else {
            this.newApplicant.searchResults = [];
        }
    }

    async findAccounts(searchKey) {
        try {
            const results = await searchAccounts({ searchKey });
            this.newApplicant.searchResults = results;
        } catch (error) {
            console.error(error);
        }
    }

    async handleNewApplicantAccountSelect(event) {
        const accountId = event.currentTarget.dataset.id;
        this.newApplicant.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId });
            this.newApplicant = { ...this.newApplicant, ...details, AccountId: accountId };
            // Optionally, save immediately
            //await createApplicant({ appFormId: this.recordId, accDetails: details });
            await this.loadApplicants(); // refresh list
            this.newApplicant = null; // hide new applicant form
        } catch (error) {
            console.error(error);
        }
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 1) {
            this.findAccounts();
        } else {
            this.searchResults = [];
        }
    }

    async findAccounts() {
        try {
            this.searchResults = await searchAccounts({ searchKey: this.searchKey });
        } catch (error) {
            console.error('Error searching accounts:', error);
        }
    }

    async handleAccountSelect(event) {
        this.selectedAccountId = event.currentTarget.dataset.id;
        this.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId: this.selectedAccountId });
            this.formData = { ...details };
            // Save as Applicant
          //  await createApplicant({ appFormId: this.recordId, accDetails: this.formData });
            this.loadApplicants(); // refresh
        } catch (error) {
            console.error('Error fetching account details:', error);
        }
    }

    handleApplicantSearchKeyChange(event) {
    const applicantId = event.target.dataset.id;
    const value = event.target.value;

    this.applicants = this.applicants.map(app => {
        if (app.Id === applicantId) {
            return { ...app, searchKey: value };
        }
        return app;
    });

    if (value.length > 1) {
        this.findAccountsForApplicant(applicantId, value);
    }
}

async findAccountsForApplicant(applicantId, searchKey) {
    try {
        const results = await searchAccounts({ searchKey });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { ...app, searchResults: results };
            }
            return app;
        });
    } catch (error) {
        console.error('Error searching accounts for applicant:', error);
    }
}

async handleApplicantAccountSelect(event) {
    const applicantId = event.currentTarget.dataset.applicantId;
    const accountId = event.currentTarget.dataset.id;

    try {
        const details = await getAccountDetails({ accountId });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { 
                    ...app, 
                    AccountId: accountId,
                    Company_Name__c: details.companyName,
                    DBA__c: details.dba,
                    Industry__c: details.industry,
                    Employees__c: details.employees,
                    Annual_Revenue__c: details.annualRevenue,
                    Net_Profit__c: details.netProfit,
                    Legal_Entity__c: details.legalEntity,
                    Comments__c: details.comment,
                    searchResults: []
                };
            }
            return app;
        });
    } catch (error) {
        console.error('Error fetching account details for applicant:', error);
    }
}

}


public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name 
            FROM Account 
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm app = [
            SELECT Id, AccountId 
            FROM ApplicationForm
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name 
            FROM Applicant 
            WHERE ApplicationFormId = :appFormId
        ];
    }

    // Create new Applicant
    @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant app = new Applicant();
        app.ApplicationFormId = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }

    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }
}




 <!-- Existing Applicants -->
    <template if:true={applicants.length}>
        <template for:each={applicants} for:item="applicant">
            <div key={applicant.Id} class="slds-box slds-m-around_medium">
                <lightning-card title="Borrower / Guarantor">
                    <!-- Account info prefilled -->
                    <div class="slds-grid slds-wrap slds-m-around_medium">
                        <lightning-input class="slds-size_1-of-2" label="Company Name" value={applicant.Company_Name__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="DBA" value={applicant.DBA__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Industry" value={applicant.Industry__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Employees" value={applicant.Employees__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={applicant.Annual_Revenue__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Net Profit" value={applicant.Net_Profit__c} disabled>
                        </lightning-input>
                        <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={applicant.Legal_Entity__c} disabled>
                        </lightning-input>
                        <lightning-textarea class="slds-size_1-of-1" label="Comments" value={applicant.Comments__c} disabled>
                        </lightning-textarea>
                    </div>
                </lightning-card>
            </div>
        </template>
    </template>

    <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_small"></lightning-button>

    <!-- New Applicant Section -->
    <template if:true={newApplicant}>
        <div class="slds-box slds-m-around_medium">
            <lightning-card title="New Applicant">
                <!-- Account Lookup -->
                <lightning-input label="Search Account" type="text" value={newApplicant.searchKey} onchange={handleNewApplicantSearchKeyChange} placeholder="Type account name...">
                </lightning-input>
                <template if:true={newApplicant.searchResults}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={newApplicant.searchResults} for:item="acc">
                            <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" onclick={handleNewApplicantAccountSelect} data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={newApplicant.Company_Name__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={newApplicant.DBA__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={newApplicant.Industry__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" value={newApplicant.Employees__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={newApplicant.Annual_Revenue__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={newApplicant.Net_Profit__c} disabled></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={newApplicant.Legal_Entity__c} disabled></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comments" value={newApplicant.Comments__c} disabled></lightning-textarea>
                </div>
            </lightning-card>
        </div>
    </template>

import { LightningElement, track, api } from 'lwc';
import getApplicantsFromAppForm from '@salesforce/apex/PartyDetailsController.getApplicantsFromAppForm';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import createApplicant from '@salesforce/apex/PartyDetailsController.createApplicant';

export default class PartyDetails extends LightningElement {
    @api recordId;
    @track applicants = [];
    @track newApplicant;

    connectedCallback() {
        this.loadApplicants();
    }

    async loadApplicants() {
        try {
            this.applicants = await getApplicantsFromAppForm({ appFormId: this.recordId });
        } catch (error) {
            console.error('Error fetching applicants', error);
        }
    }

    addApplicant() {
        this.newApplicant = {
            searchKey: '',
            searchResults: [],
            Company_Name__c: '',
            DBA__c: '',
            Industry__c: '',
            Employees__c: null,
            Annual_Revenue__c: '',
            Net_Profit__c: '',
            Legal_Entity__c: '',
            Comments__c: ''
        };
    }

    handleNewApplicantSearchKeyChange(event) {
        const searchKey = event.target.value;
        this.newApplicant.searchKey = searchKey;
        if (searchKey.length > 1) {
            this.findAccounts(searchKey);
        } else {
            this.newApplicant.searchResults = [];
        }
    }

    async findAccounts(searchKey) {
        try {
            const results = await searchAccounts({ searchKey });
            this.newApplicant.searchResults = results;
        } catch (error) {
            console.error(error);
        }
    }

    async handleNewApplicantAccountSelect(event) {
        const accountId = event.currentTarget.dataset.id;
        this.newApplicant.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId });
            this.newApplicant = { ...this.newApplicant, ...details, AccountId: accountId };
            // Optionally, save immediately
            await createApplicant({ appFormId: this.recordId, accDetails: details });
            this.loadApplicants(); // refresh list
            this.newApplicant = null; // hide new applicant form
        } catch (error) {
            console.error(error);
        }
    }
}




<template if:true={applicants.length}>
    <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.Id} class="slds-box slds-m-around_medium">
            <lightning-card title="Borrowers / Guarantors">

                <!-- Account Search Input -->
                <template if:false={applicant.AccountId}>
                    <div class="slds-m-around_medium">
                        <lightning-input 
                            label="Select Existing Business Relationship Record"
                            type="text"
                            value={applicant.searchKey}
                            data-id={applicant.Id}
                            onchange={handleApplicantSearchKeyChange}
                            placeholder="Type account name..."
                            class="slds-size_1-of-1">
                        </lightning-input>

                        <template if:true={applicant.searchResults}>
                            <div class="slds-box slds-m-top_x-small">
                                <template for:each={applicant.searchResults} for:item="acc">
                                    <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" 
                                         onclick={handleApplicantAccountSelect} 
                                         data-applicant-id={applicant.Id} 
                                         data-id={acc.Id}>
                                        {acc.Name}
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" 
                                     label="Company Name" 
                                     value={applicant.Company_Name__c} 
                                     data-id={applicant.Id} 
                                     data-field="Company_Name__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="DBA" 
                                     value={applicant.DBA__c} 
                                     data-id={applicant.Id} 
                                     data-field="DBA__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Industry" 
                                     value={applicant.Industry__c} 
                                     data-id={applicant.Id} 
                                     data-field="Industry__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     type="number"
                                     label="Employees" 
                                     value={applicant.Employees__c} 
                                     data-id={applicant.Id} 
                                     data-field="Employees__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Annual Revenue" 
                                     value={applicant.Annual_Revenue__c} 
                                     data-id={applicant.Id} 
                                     data-field="Annual_Revenue__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Net Profit" 
                                     value={applicant.Net_Profit__c} 
                                     data-id={applicant.Id} 
                                     data-field="Net_Profit__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Legal Entity" 
                                     value={applicant.Legal_Entity__c} 
                                     data-id={applicant.Id} 
                                     data-field="Legal_Entity__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-textarea class="slds-size_1-of-1" 
                                        label="Comment" 
                                        value={applicant.Comments__c} 
                                        data-id={applicant.Id} 
                                        data-field="Comments__c"
                                        onchange={handleApplicantChange}>
                    </lightning-textarea>
                </div>

            </lightning-card>

            <!-- Remove Applicant -->
            <lightning-button variant="destructive" 
                              label="Remove Applicant" 
                              data-id={applicant.Id} 
                              onclick={removeApplicant}
                              class="slds-m-top_small">
            </lightning-button>
        </div>
    </template>
</template>

import { LightningElement, track, api } from 'lwc';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import getAccountDetailsFromAppForm from '@salesforce/apex/PartyDetailsController.getAccountDetailsFromAppForm';
import getApplicantsFromAppForm from '@salesforce/apex/PartyDetailsController.getApplicantsFromAppForm';
import { OmniscriptBaseMixin } from 'omnistudio/omniscriptBaseMixin';

export default class PartyDetails extends OmniscriptBaseMixin(LightningElement) {
    @api recordId; // ApplicationForm Id
    @track searchKey = '';
    @track searchResults = [];
    @track formData = {};
    @track selectedAccountId;
    @track applicants = [];

    connectedCallback() {
        if (this.recordId) {
            this.prefillFromAppForm();
            this.loadApplicants();
        }
    }

    async prefillFromAppForm() {
        try {
            const accountDetails = await getAccountDetailsFromAppForm({ appFormId: this.recordId });
            this.formData = { ...accountDetails };
            this.selectedAccountId = accountDetails.id;
        } catch (error) {
            console.error('Error prefill:', error);
        }
    }

    async loadApplicants() {
        try {
            this.applicants = await getApplicantsFromAppForm({ appFormId: this.recordId });
        } catch (error) {
            console.error('Error fetching applicants:', error);
        }
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 1) {
            this.findAccounts();
        } else {
            this.searchResults = [];
        }
    }

    async findAccounts() {
        try {
            this.searchResults = await searchAccounts({ searchKey: this.searchKey });
        } catch (error) {
            console.error('Error searching accounts:', error);
        }
    }

    async handleAccountSelect(event) {
        this.selectedAccountId = event.currentTarget.dataset.id;
        this.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId: this.selectedAccountId });
            this.formData = { ...details };
            // Save as Applicant
          //  await createApplicant({ appFormId: this.recordId, accDetails: this.formData });
            this.loadApplicants(); // refresh
        } catch (error) {
            console.error('Error fetching account details:', error);
        }
    }

    handleApplicantSearchKeyChange(event) {
    const applicantId = event.target.dataset.id;
    const value = event.target.value;

    this.applicants = this.applicants.map(app => {
        if (app.Id === applicantId) {
            return { ...app, searchKey: value };
        }
        return app;
    });

    if (value.length > 1) {
        this.findAccountsForApplicant(applicantId, value);
    }
}

async findAccountsForApplicant(applicantId, searchKey) {
    try {
        const results = await searchAccounts({ searchKey });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { ...app, searchResults: results };
            }
            return app;
        });
    } catch (error) {
        console.error('Error searching accounts for applicant:', error);
    }
}

async handleApplicantAccountSelect(event) {
    const applicantId = event.currentTarget.dataset.applicantId;
    const accountId = event.currentTarget.dataset.id;

    try {
        const details = await getAccountDetails({ accountId });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { 
                    ...app, 
                    AccountId: accountId,
                    Company_Name__c: details.companyName,
                    DBA__c: details.dba,
                    Industry__c: details.industry,
                    Employees__c: details.employees,
                    Annual_Revenue__c: details.annualRevenue,
                    Net_Profit__c: details.netProfit,
                    Legal_Entity__c: details.legalEntity,
                    Comments__c: details.comment,
                    searchResults: []
                };
            }
            return app;
        });
    } catch (error) {
        console.error('Error fetching account details for applicant:', error);
    }
}

}



public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name 
            FROM Account 
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm app = [
            SELECT Id, AccountId 
            FROM ApplicationForm
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name 
            FROM Applicant 
            WHERE ApplicationFormId = :appFormId
        ];
    }

    // Create new Applicant
    @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant app = new Applicant();
        app.ApplicationFormId = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }

    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }
}


 async loadApplicants() {
        try {
            let data = await getApplicantsByApplicationForm({ applicationFormId: this.applicationFormId });
            this.applicants = data.map(app => ({
                key: app.Id,
                id: app.Id,
                companyName: app.CompanyName__c,
                industry: app.Industry__c,
                employees: app.Employees__c,
                annualRevenue: app.AnnualRevenue__c,
                phoneNumber: app.Phone__c,
                website: app.Website__c,
                address: app.Address__c,
                searchKey: '',
                searchResults: []
            }));
        } catch (error) {
            console.error('Error loading applicants: ', error);
        }
    }

    handleAccountSearch(event) {
        const index = event.target.dataset.index;
        const value = event.target.value;

        this.applicants[index].searchKey = value;

        if (value.length > 2) {
            searchAccounts({ searchKey: value })
                .then(result => {
                    this.applicants[index].searchResults = result;
                    this.applicants = [...this.applicants];
                })
                .catch(err => console.error(err));
        }
    }

    async handleAccountSelect(event) {
        const index = event.target.dataset.index;
        const accountId = event.target.dataset.id;

        try {
            let account = await getAccountDetails({ accountId });
            this.applicants[index] = {
                ...this.applicants[index],
                accountId: account.Id,
                companyName: account.Name,
                industry: account.Industry,
                employees: account.NumberOfEmployees,
                annualRevenue: account.AnnualRevenue,
                phoneNumber: account.Phone,
                website: account.Website,
                address: account.BillingStreet,
                searchResults: []
            };
            this.applicants = [...this.applicants];
        } catch (error) {
            console.error(error);
        }
    }

    handleInputChange(event) {
        const index = event.target.dataset.index;
        const field = event.target.dataset.id;
        this.applicants[index][field] = event.target.value;
        this.applicants = [...this.applicants];
    }

    addApplicant() {
        this.applicants = [
            ...this.applicants,
            {
                key: Date.now(),
                id: null,
                companyName: '',
                industry: '',
                employees: '',
                annualRevenue: '',
                phoneNumber: '',
                website: '',
                address: '',
                searchKey: '',
                searchResults: []
            }
        ];
    }

    removeApplicant(event) {
        const index = event.target.dataset.index;
        this.applicants.splice(index, 1);
        this.applicants = [...this.applicants];
    }


<template>
    <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.key} class="slds-box slds-m-around_medium">

            <!-- Account Lookup -->
            <div class="slds-m-bottom_small">
                <lightning-input 
                    label="Search Account"
                    value={applicant.searchKey}
                    onchange={handleAccountSearch}
                    data-index={index}
                    placeholder="Type account name...">
                </lightning-input>

                <template if:true={applicant.searchResults}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={applicant.searchResults} for:item="acc">
                            <div key={acc.Id}
                                class="slds-p-around_x-small slds-border_bottom slds-text-link"
                                onclick={handleAccountSelect}
                                data-index={index}
                                data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>
            </div>

            <!-- Applicant Fields -->
            <lightning-input label="Company Name" value={applicant.companyName}
                data-id="companyName" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Industry" value={applicant.industry}
                data-id="industry" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Employees" value={applicant.employees}
                data-id="employees" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Annual Revenue" value={applicant.annualRevenue}
                data-id="annualRevenue" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Phone" value={applicant.phoneNumber}
                data-id="phoneNumber" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Website" value={applicant.website}
                data-id="website" data-index={index} onchange={handleInputChange}></lightning-input>
            <lightning-input label="Address" value={applicant.address}
                data-id="address" data-index={index} onchange={handleInputChange}></lightning-input>

            <!-- Remove -->
            <lightning-button variant="destructive" label="Remove Applicant"
                data-index={index} onclick={removeApplicant}>
            </lightning-button>
        </div>
    </template>

    <!-- Add -->
    <lightning-button label="Add Applicant" onclick={addApplicant}></lightning-button>
</template>



public with sharing class ApplicantController {
    
    // Fetch existing Applicants for given ApplicationForm
    @AuraEnabled(cacheable=true)
    public static List<Applicant__c> getApplicants(Id applicationFormId) {
        return [
            SELECT Id, Name, Account__c, Account__r.Name, Account__r.Industry,
                   Account__r.AnnualRevenue, Account__r.NumberOfEmployees,
                   Account__r.Phone, Account__r.Website, Account__r.BillingStreet
            FROM Applicant__c
            WHERE ApplicationForm__c = :applicationFormId
        ];
    }

    // Search accounts
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        return [
            SELECT Id, Name, Industry, AnnualRevenue, NumberOfEmployees,
                   Phone, Website, BillingStreet
            FROM Account
            WHERE Name LIKE :('%' + searchKey + '%')
            LIMIT 10
        ];
    }

    // Create or update Applicant
    @AuraEnabled
    public static void upsertApplicants(List<Applicant__c> applicants) {
        upsert applicants;
    }
}



import { LightningElement, api, track } from 'lwc';
import getApplicants from '@salesforce/apex/ApplicantController.getApplicants';
import searchAccounts from '@salesforce/apex/ApplicantController.searchAccounts';
import upsertApplicants from '@salesforce/apex/ApplicantController.upsertApplicants';

export default class ApplicantManager extends LightningElement {
    @api recordId; // ApplicationFormId
    @track applicants = [];

    connectedCallback() {
        this.loadApplicants();
    }

    // Load applicants from backend
    loadApplicants() {
        getApplicants({ applicationFormId: this.recordId })
            .then(result => {
                this.applicants = result.map(app => ({
                    id: app.Id,
                    accountId: app.Account__c,
                    companyName: app.Account__r?.Name,
                    industry: app.Account__r?.Industry,
                    employees: app.Account__r?.NumberOfEmployees,
                    annualRevenue: app.Account__r?.AnnualRevenue,
                    phoneNumber: app.Account__r?.Phone,
                    website: app.Account__r?.Website,
                    address: app.Account__r?.BillingStreet,
                    searchKey: '',
                    searchResults: []
                }));
            })
            .catch(error => console.error(error));
    }

    // Add empty applicant row
    addApplicant() {
        this.applicants = [
            ...this.applicants,
            {
                id: null,
                accountId: null,
                companyName: '',
                industry: '',
                employees: '',
                annualRevenue: '',
                phoneNumber: '',
                website: '',
                address: '',
                searchKey: '',
                searchResults: []
            }
        ];
    }

    // Remove row
    removeApplicant(event) {
        const index = event.target.dataset.index;
        this.applicants.splice(index, 1);
        this.applicants = [...this.applicants];
    }

    // Input change
    handleInputChange(event) {
        const index = event.target.dataset.index;
        const field = event.target.dataset.id;
        this.applicants[index][field] = event.target.value;
    }

    // Account search
    handleAccountSearch(event) {
        const index = event.target.dataset.index;
        const searchKey = event.target.value;
        this.applicants[index].searchKey = searchKey;

        if (searchKey.length > 2) {
            searchAccounts({ searchKey })
                .then(result => {
                    this.applicants[index].searchResults = result;
                    this.applicants = [...this.applicants];
                })
                .catch(error => console.error(error));
        } else {
            this.applicants[index].searchResults = [];
            this.applicants = [...this.applicants];
        }
    }

    // When Account selected
    handleAccountSelect(event) {
        const index = event.target.dataset.index;
        const accId = event.target.dataset.id;
        const acc = this.applicants[index].searchResults.find(a => a.Id === accId);

        this.applicants[index] = {
            ...this.applicants[index],
            accountId: acc.Id,
            companyName: acc.Name,
            industry: acc.Industry,
            employees: acc.NumberOfEmployees,
            annualRevenue: acc.AnnualRevenue,
            phoneNumber: acc.Phone,
            website: acc.Website,
            address: acc.BillingStreet,
            searchResults: []
        };
    }

    // Save all applicants
    saveApplicants() {
        const records = this.applicants.map(app => ({
            Id: app.id,
            ApplicationForm__c: this.recordId,
            Account__c: app.accountId
        }));

        upsertApplicants({ applicants: records })
            .then(() => {
                this.loadApplicants();
            })
            .catch(error => console.error(error));
    }
}



   <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={index} class="slds-box slds-m-around_medium">

            <!-- Account Lookup -->
            <lightning-input 
                label="Search Account"
                value={applicant.searchKey}
                onchange={handleAccountSearch}
                data-index={index}
                placeholder="Type account name...">
            </lightning-input>

            <template if:true={applicant.searchResults}>
                <div class="slds-box slds-m-top_x-small">
                    <template for:each={applicant.searchResults} for:item="acc">
                        <div key={acc.Id}
                            class="slds-p-around_x-small slds-border_bottom slds-text-link"
                            onclick={handleAccountSelect}
                            data-index={index}
                            data-id={acc.Id}>
                            {acc.Name}
                        </div>
                    </template>
                </div>
            </template>

            <!-- Editable Fields -->
            <div class="slds-grid slds-grid_align-start slds-p-around_xx-small">
                <lightning-input label="Company Name" value={applicant.companyName}
                    data-id="companyName" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>

                <lightning-input label="Industry" value={applicant.industry}
                    data-id="industry" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>
            </div>

            <div class="slds-grid slds-grid_align-start slds-p-around_xx-small">
                <lightning-input label="Employees" value={applicant.employees}
                    data-id="employees" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>

                <lightning-input label="Annual Revenue" value={applicant.annualRevenue}
                    data-id="annualRevenue" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>
            </div>

            <div class="slds-grid slds-grid_align-start slds-p-around_xx-small">
                <lightning-input label="Phone" value={applicant.phoneNumber}
                    data-id="phoneNumber" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>

                <lightning-input label="Website" value={applicant.website}
                    data-id="website" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-2"></lightning-input>
            </div>

            <div class="slds-grid slds-grid_align-start slds-p-around_xx-small">
                <lightning-input label="Address" value={applicant.address}
                    data-id="address" data-index={index} onchange={handleInputChange}
                    class="slds-size_1-of-1"></lightning-input>
            </div>

            <!-- Remove Applicant Button -->
            <lightning-button variant="destructive" label="Remove Applicant"
                data-index={index} onclick={removeApplicant} class="slds-m-top_small">
            </lightning-button>
        </div>
    </template>

    <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_medium"></lightning-button>
    <lightning-button variant="brand" label="Save All" onclick={saveApplicants} class="slds-m-top_medium"></lightning-button>
</template>



<template>
    <!-- Account Search -->
    <lightning-input 
        label="Select Existing Business Relationship Record"
        value={searchKey}
        onchange={handleSearchKeyChange}
        placeholder="Type account name..."
    ></lightning-input>

    <template if:true={searchResults.length}>
        <div class="slds-box slds-m-top_x-small">
            <template for:each={searchResults} for:item="acc">
                <div key={acc.Id} 
                     class="slds-p-around_x-small slds-border_bottom slds-text-link"
                     data-id={acc.Id}
                     onclick={handleAccountSelect}>
                    {acc.Name}
                </div>
            </template>
        </div>
    </template>

    <!-- Editable Applicant Details -->
    <template for:each={applicants} for:item="app" for:index="index">
        <lightning-card key={app.Id} title="Applicant Details">
            <div class="slds-p-around_medium">
                <lightning-input label="Company Name" name="Company_Name__c"
                    value={app.Company_Name__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="DBA" name="DBA__c"
                    value={app.DBA__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="Industry" name="Industry__c"
                    value={app.Industry__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="Employees" type="number" name="Employees__c"
                    value={app.Employees__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="Annual Revenue" type="number" name="Annual_Revenue__c"
                    value={app.Annual_Revenue__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="Net Profit" type="number" name="Net_Profit__c"
                    value={app.Net_Profit__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-input label="Company Address" name="Company_Address__c"
                    value={app.Company_Address__c} data-index={index}
                    onchange={handleInputChange}></lightning-input>
                <lightning-textarea label="Comment" name="Comment__c"
                    value={app.Comment__c} data-index={index}
                    onchange={handleInputChange}></lightning-textarea>
            </div>
        </lightning-card>
    </template>

    <!-- Save button -->
    <lightning-button variant="brand" label="Save Applicants" 
        onclick={saveChanges} class="slds-m-top_medium"></lightning-button>
</template>


<lightning-card title="Borrowers / Guarantors">

    <!-- Account Search Input for adding new applicant -->
    <div class="slds-m-around_medium">
        <lightning-input 
            label="Add Applicant from Account"
            type="text"
            value={searchKey}
            onchange={handleSearchKeyChange}
            placeholder="Type account name..."
            class="slds-size_1-of-1">
        </lightning-input>

        <template if:true={searchResults.length}>
            <div class="slds-box slds-m-top_x-small">
                <template for:each={searchResults} for:item="acc">
                    <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" 
                        onclick={handleAccountSelect} data-id={acc.Id}>
                        {acc.Name}
                    </div>
                </template>
            </div>
        </template>
    </div>

    <!-- Existing Applicants -->
    <template if:true={applicants.length}>
        <div class="slds-box slds-m-around_medium">
            <template for:each={applicants} for:item="app">
                <lightning-card key={app.Id} title={app.Company_Name__c}>
                    <p class="slds-p-around_small">DBA: {app.DBA__c}</p>
                    <p class="slds-p-around_small">Industry: {app.Industry__c}</p>
                    <p class="slds-p-around_small">Employees: {app.Employees__c}</p>
                    <p class="slds-p-around_small">Revenue: {app.Annual_Revenue__c}</p>
                    <p class="slds-p-around_small">Net Profit: {app.Net_Profit__c}</p>
                    <p class="slds-p-around_small">Legal Entity: {app.Legal_Entity__c}</p>
                </lightning-card>
            </template>
        </div>
    </template>

</lightning-card>

<template if:true={applicants.length}>
    <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.Id} class="slds-box slds-m-around_medium">
            <lightning-card title="Borrowers / Guarantors">

                <!-- Account Search Input -->
                <template if:false={applicant.AccountId}>
                    <div class="slds-m-around_medium">
                        <lightning-input 
                            label="Select Existing Business Relationship Record"
                            type="text"
                            value={applicant.searchKey}
                            data-id={applicant.Id}
                            onchange={handleApplicantSearchKeyChange}
                            placeholder="Type account name..."
                            class="slds-size_1-of-1">
                        </lightning-input>

                        <template if:true={applicant.searchResults && applicant.searchResults.length}>
                            <div class="slds-box slds-m-top_x-small">
                                <template for:each={applicant.searchResults} for:item="acc">
                                    <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" 
                                         onclick={handleApplicantAccountSelect} 
                                         data-applicant-id={applicant.Id} 
                                         data-id={acc.Id}>
                                        {acc.Name}
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Applicant Details -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" 
                                     label="Company Name" 
                                     value={applicant.Company_Name__c} 
                                     data-id={applicant.Id} 
                                     data-field="Company_Name__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="DBA" 
                                     value={applicant.DBA__c} 
                                     data-id={applicant.Id} 
                                     data-field="DBA__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Industry" 
                                     value={applicant.Industry__c} 
                                     data-id={applicant.Id} 
                                     data-field="Industry__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     type="number"
                                     label="Employees" 
                                     value={applicant.Employees__c} 
                                     data-id={applicant.Id} 
                                     data-field="Employees__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Annual Revenue" 
                                     value={applicant.Annual_Revenue__c} 
                                     data-id={applicant.Id} 
                                     data-field="Annual_Revenue__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Net Profit" 
                                     value={applicant.Net_Profit__c} 
                                     data-id={applicant.Id} 
                                     data-field="Net_Profit__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-input class="slds-size_1-of-2" 
                                     label="Legal Entity" 
                                     value={applicant.Legal_Entity__c} 
                                     data-id={applicant.Id} 
                                     data-field="Legal_Entity__c"
                                     onchange={handleApplicantChange}>
                    </lightning-input>

                    <lightning-textarea class="slds-size_1-of-1" 
                                        label="Comment" 
                                        value={applicant.Comments__c} 
                                        data-id={applicant.Id} 
                                        data-field="Comments__c"
                                        onchange={handleApplicantChange}>
                    </lightning-textarea>
                </div>

            </lightning-card>

            <!-- Remove Applicant -->
            <lightning-button variant="destructive" 
                              label="Remove Applicant" 
                              data-id={applicant.Id} 
                              onclick={removeApplicant}
                              class="slds-m-top_small">
            </lightning-button>
        </div>
    </template>
</template>

handleApplicantSearchKeyChange(event) {
    const applicantId = event.target.dataset.id;
    const value = event.target.value;

    this.applicants = this.applicants.map(app => {
        if (app.Id === applicantId) {
            return { ...app, searchKey: value };
        }
        return app;
    });

    if (value.length > 1) {
        this.findAccountsForApplicant(applicantId, value);
    }
}

async findAccountsForApplicant(applicantId, searchKey) {
    try {
        const results = await searchAccounts({ searchKey });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { ...app, searchResults: results };
            }
            return app;
        });
    } catch (error) {
        console.error('Error searching accounts for applicant:', error);
    }
}

async handleApplicantAccountSelect(event) {
    const applicantId = event.currentTarget.dataset.applicantId;
    const accountId = event.currentTarget.dataset.id;

    try {
        const details = await getAccountDetails({ accountId });
        this.applicants = this.applicants.map(app => {
            if (app.Id === applicantId) {
                return { 
                    ...app, 
                    AccountId: accountId,
                    Company_Name__c: details.companyName,
                    DBA__c: details.dba,
                    Industry__c: details.industry,
                    Employees__c: details.employees,
                    Annual_Revenue__c: details.annualRevenue,
                    Net_Profit__c: details.netProfit,
                    Legal_Entity__c: details.legalEntity,
                    Comments__c: details.comment,
                    searchResults: []
                };
            }
            return app;
        });
    } catch (error) {
        console.error('Error fetching account details for applicant:', error);
    }
}




 <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.key} class="slds-box slds-m-around_medium">
            <lightning-card title="Borrowers / Guarantors">

                <!-- Account Search Input -->
                <template if:false={selectedAccountId}>
                    <div class="slds-m-around_medium">
                        <lightning-input 
                            label="Select Existing Business Relationship Record"
                            type="text"
                            value={searchKey}
                            onchange={handleSearchKeyChange}
                            placeholder="Type account name..."
                            class="slds-size_1-of-1">
                        </lightning-input>

                        <template if:true={searchResults.length}>
                            <div class="slds-box slds-m-top_x-small">
                                <template for:each={searchResults} for:item="acc">
                                    <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" 
                                        onclick={handleAccountSelect} data-id={acc.Id}>
                                        {acc.Name}
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Account Form Fields -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} data-field="companyName" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} data-field="dba" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} data-field="industry" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" type="number" value={formData.employees} data-field="employees" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} data-field="annualRevenue" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} data-field="netProfit" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} data-field="legalEntity" onchange={handleInputChange}></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} data-field="comment" onchange={handleInputChange}></lightning-textarea>
                </div>

            </lightning-card>

            <!-- Remove Applicant Button -->
            <lightning-button variant="destructive" label="Remove Applicant" data-index={index} onclick={removeApplicant} class="slds-m-top_small"></lightning-button>
        </div>
    </template>

    <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_medium"></lightning-button>


import { LightningElement, track, api } from 'lwc';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import getAccountDetailsFromAppForm from '@salesforce/apex/PartyDetailsController.getAccountDetailsFromAppForm';
import getApplicantsFromAppForm from '@salesforce/apex/PartyDetailsController.getApplicantsFromAppForm';
import { OmniscriptBaseMixin } from 'omnistudio/omniscriptBaseMixin';

export default class PartyDetails extends OmniscriptBaseMixin(LightningElement) {
    @api recordId; // ApplicationForm Id
    @track searchKey = '';
    @track searchResults = [];
    @track formData = {};
    @track selectedAccountId;
    @track applicants = [];

    connectedCallback() {
        if (this.recordId) {
            this.prefillFromAppForm();
            this.loadApplicants();
        }
    }

    async prefillFromAppForm() {
        try {
            const accountDetails = await getAccountDetailsFromAppForm({ appFormId: this.recordId });
            this.formData = { ...accountDetails };
            this.selectedAccountId = accountDetails.id;
        } catch (error) {
            console.error('Error prefill:', error);
        }
    }

    async loadApplicants() {
        try {
            this.applicants = await getApplicantsFromAppForm({ appFormId: this.recordId });
        } catch (error) {
            console.error('Error fetching applicants:', error);
        }
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 1) {
            this.findAccounts();
        } else {
            this.searchResults = [];
        }
    }

    async findAccounts() {
        try {
            this.searchResults = await searchAccounts({ searchKey: this.searchKey });
        } catch (error) {
            console.error('Error searching accounts:', error);
        }
    }

    async handleAccountSelect(event) {
        this.selectedAccountId = event.currentTarget.dataset.id;
        this.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId: this.selectedAccountId });
            this.formData = { ...details };
            // Save as Applicant
          //  await createApplicant({ appFormId: this.recordId, accDetails: this.formData });
            this.loadApplicants(); // refresh
        } catch (error) {
            console.error('Error fetching account details:', error);
        }
    }
}

public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name 
            FROM Account 
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm app = [
            SELECT Id, AccountId 
            FROM ApplicationForm
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name, Company_Name__c,Role,DBA__c,Legal_Entity__c,Industry__c,Employees__c,Annual_Revenue__c, Net_Profit__c from Applicant
            WHERE ApplicationFormId = :appFormId
        ];
    }

    // Create new Applicant
  /*  @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant app = new Applicant();
        app.ApplicationFormId = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }
 */
    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }
}





public with sharing class PartyDetailsController {

    // Applicant wrapper
    public class ApplicantDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String firstName;
        @AuraEnabled public String lastName;
        @AuraEnabled public String email;
        @AuraEnabled public String phone;
        @AuraEnabled public String role; // Borrower/Guarantor
    }

    @AuraEnabled(cacheable=true)
    public static List<ApplicantDetails> getApplicantsFromAppForm(Id appFormId) {
        List<ApplicantDetails> result = new List<ApplicantDetails>();

        if(appFormId == null) return result;

        for(Applicant app : [
            SELECT Id, FirstName, LastName, Email, Phone, Role__c
            FROM Applicant
            WHERE ApplicationFormId = :appFormId
        ]) {
            ApplicantDetails d = new ApplicantDetails();
            d.id        = app.Id;
            d.firstName = app.FirstName;
            d.lastName  = app.LastName;
            d.email     = app.Email;
            d.phone     = app.Phone;
            d.role      = app.Role__c;
            result.add(d);
        }
        return result;
    }
}

 @api recordId; // ApplicationForm Id (Loan Request Id)
    @track applicants = [];

    @wire(getApplicantsFromAppForm, { appFormId: '$recordId' })
    wiredApplicants({ error, data }) {
        if (data) {
            this.applicants = data;
        } else if (error) {
            console.error('Error fetching applicants:', error);
        }
    }

    removeApplicant(event) {
        const index = event.target.dataset.index;
        this.applicants.splice(index, 1);
        this.applicants = [...this.applicants];
    }

    addApplicant() {
        this.applicants = [...this.applicants, {
            id: null, firstName: '', lastName: '', email: '', phone: '', role: ''
        }];
    }

public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name 
            FROM Account 
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm app = [
            SELECT Id, AccountId 
            FROM ApplicationForm
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name 
            FROM Applicant 
            WHERE ApplicationForm = :appFormId
        ];
    }

    // Create new Applicant
    @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant app = new Applicant();
       // app.ApplicationForm__c = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }

    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }
}

<!-- partyDetails.html -->
<template>
    <lightning-card title="Borrowers / Guarantors">

        <!-- Account Search -->
        <template if:false={selectedAccountId}>
            <div class="slds-m-around_medium">
                <lightning-input 
                    label="Search Account"
                    type="text"
                    value={searchKey}
                    onchange={handleSearchKeyChange}
                    placeholder="Type account name...">
                </lightning-input>

                <template if:true={searchResults.length}>
                    <div class="slds-box slds-m-top_x-small">
                        <template for:each={searchResults} for:item="acc">
                            <div key={acc.Id} 
                                class="slds-p-around_x-small slds-border_bottom" 
                                onclick={handleAccountSelect} 
                                data-id={acc.Id}>
                                {acc.Name}
                            </div>
                        </template>
                    </div>
                </template>
            </div>
        </template>

        <!-- Account Fields (prefill from AppForm / lookup) -->
        <div class="slds-grid slds-wrap slds-m-around_medium">
            <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Employees" value={formData.employees} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} readonly></lightning-input>
            <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} readonly></lightning-input>
            <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} readonly></lightning-textarea>
        </div>

    </lightning-card>

    <!-- Existing Applicants -->
    <template if:true={applicants.length}>
        <lightning-card title="Existing Applicants">
            <template for:each={applicants} for:item="app">
                <p key={app.Id} class="slds-p-around_small">{app.Name}</p>
            </template>
        </lightning-card>
    </template>
</template>


// partyDetails.js
import { LightningElement, track, api } from 'lwc';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import getAccountDetailsFromAppForm from '@salesforce/apex/PartyDetailsController.getAccountDetailsFromAppForm';
import getApplicantsFromAppForm from '@salesforce/apex/PartyDetailsController.getApplicantsFromAppForm';
import createApplicant from '@salesforce/apex/PartyDetailsController.createApplicant';
import { OmniscriptBaseMixin } from 'omnistudio/omniscriptBaseMixin';

export default class PartyDetails extends OmniscriptBaseMixin(LightningElement) {
    @api recordId; // ApplicationForm Id
    @track searchKey = '';
    @track searchResults = [];
    @track formData = {};
    @track selectedAccountId;
    @track applicants = [];

    connectedCallback() {
        if (this.recordId) {
            this.prefillFromAppForm();
            this.loadApplicants();
        }
    }

    async prefillFromAppForm() {
        try {
            const accountDetails = await getAccountDetailsFromAppForm({ appFormId: this.recordId });
            this.formData = { ...accountDetails };
            this.selectedAccountId = accountDetails.id;
        } catch (error) {
            console.error('Error prefill:', error);
        }
    }

    async loadApplicants() {
        try {
            this.applicants = await getApplicantsFromAppForm({ appFormId: this.recordId });
        } catch (error) {
            console.error('Error fetching applicants:', error);
        }
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 1) {
            this.findAccounts();
        } else {
            this.searchResults = [];
        }
    }

    async findAccounts() {
        try {
            this.searchResults = await searchAccounts({ searchKey: this.searchKey });
        } catch (error) {
            console.error('Error searching accounts:', error);
        }
    }

    async handleAccountSelect(event) {
        this.selectedAccountId = event.currentTarget.dataset.id;
        this.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId: this.selectedAccountId });
            this.formData = { ...details };
            // Save as Applicant
            await createApplicant({ appFormId: this.recordId, accDetails: this.formData });
            this.loadApplicants(); // refresh
        } catch (error) {
            console.error('Error fetching account details:', error);
        }
    }
}


public class PartyDetailsController {

    // Account search
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name 
            FROM Account 
            WHERE Name LIKE :key 
            LIMIT 10
        ];
    }

    // Account details wrapper
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }

    // Get account details
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) return new AccountDetails();
        Account acc = [
            SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c,
                   NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
            FROM Account
            WHERE Id = :accountId
            LIMIT 1
        ];
        return mapToWrapper(acc);
    }

    // Prefill from ApplicationForm
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
        if(appFormId == null) return new AccountDetails();
        ApplicationForm__c app = [
            SELECT Id, AccountId 
            FROM ApplicationForm__c 
            WHERE Id = :appFormId
            LIMIT 1
        ];
        if(app.AccountId == null) return new AccountDetails();
        return getAccountDetails(app.AccountId);
    }

    // Get existing Applicants
    @AuraEnabled(cacheable=true)
    public static List<Applicant__c> getApplicantsFromAppForm(Id appFormId) {
        return [
            SELECT Id, Name 
            FROM Applicant__c 
            WHERE ApplicationForm__c = :appFormId
        ];
    }

    // Create new Applicant
    @AuraEnabled
    public static Id createApplicant(Id appFormId, AccountDetails accDetails) {
        Applicant__c app = new Applicant__c();
        app.ApplicationForm__c = appFormId;
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Comments__c = accDetails.comment;
        insert app;
        return app.Id;
    }

    // Utility
    private static AccountDetails mapToWrapper(Account acc) {
        AccountDetails d = new AccountDetails();
        d.id            = acc.Id;
        d.companyName   = acc.Name;
        d.dba           = acc.nSBA__DBA__c;
        d.industry      = acc.Industry;
        d.employees     = acc.NumberOfEmployees;
        d.annualRevenue = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        d.netProfit     = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        d.legalEntity   = acc.Legal_Entity__c;
        d.comment       = acc.Comments__c;
        return d;
    }
}



<!--
  @description       : 
  @author            : 
  @group             : 
  @last modified on  : 08-09-2025
  @last modified by  : Pratik
-->
<template>
    <template for:each={applicants} for:item="applicant" for:index="index">
        <div key={applicant.key} class="slds-box slds-m-around_medium">
            <lightning-card title="Borrowers / Guarantors">

                <!-- Account Search Input -->
                <template if:false={selectedAccountId}>
                    <div class="slds-m-around_medium">
                        <lightning-input 
                            label="Select Existing Business Relationship Record"
                            type="text"
                            value={searchKey}
                            onchange={handleSearchKeyChange}
                            placeholder="Type account name..."
                            class="slds-size_1-of-1">
                        </lightning-input>

                        <template if:true={searchResults.length}>
                            <div class="slds-box slds-m-top_x-small">
                                <template for:each={searchResults} for:item="acc">
                                    <div key={acc.Id} class="slds-p-around_x-small slds-border_bottom" 
                                        onclick={handleAccountSelect} data-id={acc.Id}>
                                        {acc.Name}
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>
                </template>

                <!-- Account Form Fields -->
                <div class="slds-grid slds-wrap slds-m-around_medium">
                    <lightning-input class="slds-size_1-of-2" label="Company Name" value={formData.companyName} data-field="companyName" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="DBA" value={formData.dba} data-field="dba" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Industry" value={formData.industry} data-field="industry" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Employees" type="number" value={formData.employees} data-field="employees" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Annual Revenue" value={formData.annualRevenue} data-field="annualRevenue" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Net Profit" value={formData.netProfit} data-field="netProfit" onchange={handleInputChange}></lightning-input>
                    <lightning-input class="slds-size_1-of-2" label="Legal Entity" value={formData.legalEntity} data-field="legalEntity" onchange={handleInputChange}></lightning-input>
                    <lightning-textarea class="slds-size_1-of-1" label="Comment" value={formData.comment} data-field="comment" onchange={handleInputChange}></lightning-textarea>
                </div>

            </lightning-card>

            <!-- Remove Applicant Button -->
            <lightning-button variant="destructive" label="Remove Applicant" data-index={index} onclick={removeApplicant} class="slds-m-top_small"></lightning-button>
        </div>
    </template>

    <!-- Add Applicant Button -->
    <lightning-button label="Add Applicant" onclick={addApplicant} class="slds-m-top_medium"></lightning-button>
</template>






import { LightningElement, track, api } from 'lwc';
import searchAccounts from '@salesforce/apex/PartyDetailsController.searchAccounts';
import getAccountDetails from '@salesforce/apex/PartyDetailsController.getAccountDetails';
import getAccountDetailsFromAppForm from '@salesforce/apex/PartyDetailsController.getAccountDetailsFromAppForm';
import updateAccount from '@salesforce/apex/PartyDetailsController.updateAccount';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { OmniscriptBaseMixin } from 'omnistudio/omniscriptBaseMixin';

export default class PartyDetails extends OmniscriptBaseMixin(LightningElement) {
    @api recordId; 
    @track applicants = [];
    @api additionalApplicants = [];
    @track searchKey = '';
    @track searchResults = [];
    @track formData = {};
    @track selectedAccountId;

    // Create empty applicant template
    createEmptyApplicant() {
        return {
            key: Date.now(),
            Id: '',
            selectedPartyProfile: '',
            firstName: '',
            middleName: '',
            lastName: '',
            email: '',
            phoneNumber: '',
            ssn: '',
            dob: '',
            Suffix: '',
            citizenship: ''
        };
    }

    connectedCallback() {
        if (this.recordId) {
            this.prefillAccountFromAppForm(this.recordId);
        }

        if (!this.additionalApplicants || this.additionalApplicants.length === 0) {
            this.addApplicant();
        } else {
            this.processAdditionalApplicant(this.additionalApplicants);
        }
    }

    async prefillAccountFromAppForm(appFormId) {
        try {
            const accountDetails = await getAccountDetailsFromAppForm({ appFormId });
            this.formData = { ...accountDetails };
            this.selectedAccountId = accountDetails.id;
        } catch (error) {
            console.error('Error fetching related account:', error);
        }
    }

    processAdditionalApplicant(applicants) {
        if (!Array.isArray(applicants)) {
            applicants = [applicants];
        }
        this.applicants = applicants.map(applicant => ({ key: Date.now(), ...applicant }));
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 1) {
            this.findAccounts();
        } else {
            this.searchResults = [];
        }
    }

    async findAccounts() {
        try {
            this.searchResults = await searchAccounts({ searchKey: this.searchKey });
        } catch (error) {
            console.error('Error searching accounts:', error);
        }
    }

    async handleAccountSelect(event) {
        this.selectedAccountId = event.currentTarget.dataset.id;
        this.searchResults = [];
        try {
            const details = await getAccountDetails({ accountId: this.selectedAccountId });
            this.formData = { ...details };
        } catch (error) {
            console.error('Error fetching account details:', error);
        }
    }

    handleInputChange(event) {
        const index = event.target.dataset.index;
        const field = event.target.dataset.field;
        if(index !== undefined) {
            this.applicants[index][field] = event.target.value;
            this.updateToOmniScript();
        } else {
            this.formData[field] = event.target.value;
        }
    }

    async handleUpdate() {
        try {
            await updateAccount({ accountId: this.formData.id, accDetails: this.formData });
            this.dispatchEvent(new ShowToastEvent({
                title: 'Success',
                message: 'Account updated successfully',
                variant: 'success'
            }));
        } catch (error) {
            console.error('Error updating account:', error);
            this.dispatchEvent(new ShowToastEvent({
                title: 'Error Updating Account',
                message: error.body ? error.body.message : 'Unknown error',
                variant: 'error'
            }));
        }
    }

    addApplicant() {
        this.applicants = [...this.applicants, this.createEmptyApplicant()];
        this.updateToOmniScript();
    }

    removeApplicant(event) {
        const index = event.target.dataset.index;
        if (this.applicants.length > 1) {
            this.applicants.splice(index, 1);
            this.applicants = [...this.applicants];
        }
        this.updateToOmniScript();
    }

    updateToOmniScript() {
        let data = { AdditionalApplicants: this.applicants };
        this.omniApplyCallResp(data);
    }
}



public class PartyDetailsController {

    // Search accounts by name
    @AuraEnabled(cacheable=true)
    public static List<Account> searchAccounts(String searchKey) {
        String key = '%' + String.escapeSingleQuotes(searchKey) + '%';
        return [
            SELECT Id, Name
            FROM Account
            WHERE Name LIKE :key
            LIMIT 10
        ];
    }

    // Get account details by Id
    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        if (accountId == null) {
            return new AccountDetails();
        }

        Account acc;
        try {
            acc = [
                SELECT Id, Name, nSBA__DBA__c, Industry, Legal_Entity__c, Role__c,
                       NumberOfEmployees, AnnualRevenue, Net_Profit__c, Comments__c
                FROM Account
                WHERE Id = :accountId
                LIMIT 1
            ];
        } catch (Exception e) {
            throw new AuraHandledException('Apex error in getAccountDetails: ' + e.getMessage());
        }

        AccountDetails details = new AccountDetails();
        details.id             = acc.Id;
        details.companyName    = acc.Name;
        details.dba            = acc.nSBA__DBA__c;
        details.industry       = acc.Industry;
        details.employees      = acc.NumberOfEmployees;
        details.annualRevenue  = acc.AnnualRevenue != null ? String.valueOf(acc.AnnualRevenue) : null;
        details.netProfit      = acc.Net_Profit__c != null ? String.valueOf(acc.Net_Profit__c) : null;
        details.legalEntity    = acc.Legal_Entity__c;
        details.comment        = acc.Comments__c;
        return details;
    }

   @AuraEnabled(cacheable=true)
public static AccountDetails getAccountDetailsFromAppForm(Id appFormId) {
    if(appFormId == null) return new AccountDetails();

    ApplicationForm app = [
        SELECT Id, AccountId 
        FROM ApplicationForm
        WHERE Id = :appFormId
        LIMIT 1
    ];

    if(app.AccountId == null){
        return new AccountDetails(); // no related account
    }

    return getAccountDetails(app.AccountId);
}


    // Update Account fields
    @AuraEnabled
    public static void updateAccount(Id accountId, AccountDetails accDetails) {
        try {
            Account acc = new Account(Id = accountId);

            acc.Name             = accDetails.companyName;
            acc.nSBA__DBA__c     = accDetails.dba;
            acc.Industry         = accDetails.industry;
            acc.NumberOfEmployees= accDetails.employees;

            if (!String.isBlank(accDetails.annualRevenue)) {
                acc.AnnualRevenue = Decimal.valueOf(accDetails.annualRevenue);
            }
            if (!String.isBlank(accDetails.netProfit)) {
                acc.Net_Profit__c = Decimal.valueOf(accDetails.netProfit);
            }

            acc.Legal_Entity__c = accDetails.legalEntity;
            acc.Comments__c     = accDetails.comment;

            update acc;
        } catch (Exception e) {
            throw new AuraHandledException('Update failed: ' + e.getMessage());
        }
    }

    // Apex wrapper for account data
    public class AccountDetails {
        @AuraEnabled public Id id;
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public Integer employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public String comment;
    }


  /*  @AuraEnabled
    public static Id createApplicantFromAccount(AccountDetails accDetails) {
        Applicant app = new Applicant();
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees != null ? Integer.valueOf(accDetails.employees) : null;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
       // app.Start_Date__c = accDetails.startDate;
        app.Comments__c = accDetails.comment;
        
        insert app;
        return app.Id;
    } */
}
