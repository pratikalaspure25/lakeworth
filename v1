public class FetchExtractedTextWithDelayJob implements Queueable, Database.AllowsCallouts {

    private String ocrDocumentScanResultId;
    private String contentDocumentId;

    // Constructor to pass the parameters to the queueable job
    public FetchExtractedTextWithDelayJob(String ocrDocumentScanResultId, String contentDocumentId) {
        this.ocrDocumentScanResultId = ocrDocumentScanResultId;
        this.contentDocumentId = contentDocumentId;
    }

    // Implement the execute method
    public void execute(QueueableContext context) {
        // Fetch the OCR text using the fetchExtractedText method
        String extractedText = fetchExtractedText(ocrDocumentScanResultId, contentDocumentId);
        
        if (extractedText != null) {
            // Create the TransformDocumentDetailsRequest to pass to TransformDocument
            List<TransformDocumentDetailsRequest> requestList = new List<TransformDocumentDetailsRequest>();

            // Set the contentDocumentID and targetObjectApiName (which is Profit_and_Loss__c here)
            TransformDocumentDetailsRequest request = new TransformDocumentDetailsRequest();
            request.contentDocumentID = contentDocumentId;
            request.targetObjectApiName = 'Profit_and_Loss__c'; // Specify your target Salesforce object

            requestList.add(request);

            // Pass the request list to TransformDocument to process the OCR data
            TransformDocument.transform(requestList);
        } else {
            System.debug('No extracted text found or failed to fetch OCR results');
        }
    }

    // This method fetches the extracted text using the fetchExtractedText API
    private String fetchExtractedText(String ocrDocumentScanResultId, String contentDocumentId) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();

        // Salesforce REST API endpoint to fetch extracted text using the OCR result ID
        String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';

        // Prepare the request body as a JSON string
        String requestBody = JSON.serialize(new Map<String, Object>{
            'inputs' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'ocrDocumentScanResultId' => ocrDocumentScanResultId,
                    'contentDocumentId' => contentDocumentId,
                    'startPageIndex' => 1,
                    'endPageIndex' => 20
                }
            }
        });

        // Set up the HTTP request
        request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());  // Use the session ID for authorization
        request.setBody(requestBody);

        // Send the HTTP request
        HttpResponse response = http.send(request);

        // Handle the response
        if (response.getStatusCode() == 200) {
            // Deserialize the response body into a List<Object>
            Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            Map<String, Object> outputValues = (Map<String, Object>) responseMap.get('outputValues');
            Map<String, Object> detailsMap = (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');

            // Extract key-value pairs
            List<Map<String, Object>> keyValuePairs = (List<Map<String, Object>>) detailsMap.get('keyValuePairs');

            // Store the extracted values
            Map<String, String> extractedValues = new Map<String, String>();

            for (Map<String, Object> keyValuePair : keyValuePairs) {
                String keyText = (String) keyValuePair.get('key');
                String valueText = (String) keyValuePair.get('value');
                extractedValues.put(keyText, valueText);
            }

            // Return the extracted values as a JSON string to pass to TransformDocument
            return JSON.serialize(extractedValues);
        } else {
            System.debug('Error calling Extracted Text API, status: ' + response.getStatus() + ', body: ' + response.getBody());
            return null;
        }
    }
}
