import { LightningElement, api } from 'lwc';
import { ShowToastEvent }       from 'lightning/platformShowToastEvent';
import validateDlImage          from '@salesforce/apex/DocumentProcessingController.validateDlImage';
import processFile              from '@salesforce/apex/DocumentProcessingController.processFile';

export default class DocumentChecklist extends LightningElement {
  @api recordId;
  acceptedFormats = ['.png', '.jpg', '.jpeg'];

  handleUploadFinished(event) {
    const files = event.detail.files;
    if (!files.length) {
      this.showToast('Error', 'Please upload a valid DL image', 'error');
      return;
    }

    const { documentId, name } = files[0];
    const lower = name.toLowerCase();
    if (!lower.endsWith('.png') && !lower.endsWith('.jpg') && !lower.endsWith('.jpeg')) {
      this.showToast('Invalid File', 'Please upload a PNG/JPG image', 'error');
      return;
    }

    validateDlImage({ contentDocumentId: documentId })
      .then(isValid => {
        if (!isValid) {
          // throw to jump to .catch, skipping the success toast
          throw new Error('Please upload a valid Driving License image');
        }
        // only if valid do we kick off the async processing
        return processFile({ contentDocumentId: documentId, recordId: this.recordId });
      })
      .then(() => {
        // this only runs if processFile() was called
        this.showToast('Success', 'Driving license sent for processing', 'success');
      })
      .catch(error => {
        // catch either validation or processFile errors
        this.showToast('Invalid DL', error.message, 'error');
      });
  }

  handleUploadError() {
    this.showToast('Upload Failed', 'Please upload a valid DL image', 'error');
  }

  showToast(title, message, variant) {
    this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
  }
}




 @AuraEnabled
    public static Boolean validateDlImage(Id contentDocumentId) {
        // 1) Retrieve the binary
        ContentVersion cv = [
            SELECT VersionData
            FROM ContentVersion
            WHERE ContentDocumentId = :contentDocumentId
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];
        if (cv == null) {
            return false;
        }

        // 2) Initiate OCR
        String ocrId = initiateTextExtraction(contentDocumentId);
        if (String.isBlank(ocrId)) {
            return false;
        }

        // 3) Fetch extracted JSON
        String rawJson = fetchExtractedText(ocrId, contentDocumentId);
        if (String.isBlank(rawJson)) {
            return false;
        }

        // 4) Simple pattern check: at least one alphanumeric block ≥4
        Pattern p = Pattern.compile('([A-Z0-9]{4,})');
        Matcher m = p.matcher(rawJson.toUpperCase());
        return m.find();
    }

    /** Enqueue the normal async processing job */
    @AuraEnabled
    public static void processFile(Id contentDocumentId, Id recordId) {
        System.enqueueJob(new ProcessDocumentJob(contentDocumentId, recordId));
    }

    // ————————————————————————————————————
    // OCR helper methods
    // ————————————————————————————————————

    private static String initiateTextExtraction(Id contentDocumentId) {
        Http        http = new Http();
        HttpRequest req  = new HttpRequest();
        String      endpoint = '/services/data/v58.0/actions/standard/initiateTextExtraction';

        Map<String,Object> input = new Map<String,Object>{
            'contentDocumentId' => contentDocumentId,
            'startPageIndex'    => 1,
            'endPageIndex'      => 20,
            'ocrService'        => 'AMAZON_TEXTRACT'
        };
        Map<String,Object> payload = new Map<String,Object>{
            'inputs' => new List<Object>{ input }
        };

        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Content-Type','application/json');
        req.setHeader('Authorization','Bearer ' + UserInfo.getSessionId());
        req.setBody(JSON.serialize(payload));

        HttpResponse resp = http.send(req);
        if (resp.getStatusCode() != 200) {
            return null;
        }

        List<Object> respList = (List<Object>) JSON.deserializeUntyped(resp.getBody());
        if (respList.isEmpty()) return null;

        Map<String,Object> first = (Map<String,Object>) respList[0];
        Map<String,Object> out   = (Map<String,Object>) first.get('outputValues');
        Map<String,Object> details = (Map<String,Object>) out.get('ocrDocumentScanResultDetails');
        List<Object> results = (List<Object>) details.get('ocrDocumentScanResults');
        if (results.isEmpty()) return null;

        return (String) ((Map<String,Object>)results[0]).get('ocrDocumentScanResultId');
    }

    private static String fetchExtractedText(String ocrResultId, Id contentDocumentId) {
        Http        http = new Http();
        HttpRequest req  = new HttpRequest();
        String      endpoint = '/services/data/v58.0/actions/standard/fetchExtractedText';

        Map<String,Object> single = new Map<String,Object>{
            'ocrDocumentScanResultId' => ocrResultId,
            'contentDocumentId'       => contentDocumentId,
            'startPageIndex'          => 1,
            'endPageIndex'            => 20
        };
        Map<String,Object> payload = new Map<String,Object>{
            'inputs' => new List<Object>{ single }
        };

        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Content-Type','application/json');
        req.setHeader('Authorization','Bearer ' + UserInfo.getSessionId());
        req.setBody(JSON.serialize(payload));

        HttpResponse resp = http.send(req);
        return (resp.getStatusCode() == 200) ? resp.getBody() : null;
    }


 // Initiate OCR asynchronously
        String ocrId = DocumentProcessingController.initiateTextExtraction(contentDocumentId);
        if (ocrId != null) {
            // Delay by 1 minute to let OCR complete
            System.enqueueJob(new FetchExtractedTextWithDelayJob(ocrId, contentDocumentId), 1);
        }



@AuraEnabled
public static Boolean validateDlImage(Id contentDocumentId) {
    // 1) Fetch the raw OCR JSON
    String ocrId   = initiateTextExtraction(contentDocumentId);
    if (String.isBlank(ocrId)) return false;
    String rawJson = fetchExtractedText(ocrId, contentDocumentId);
    if (String.isBlank(rawJson)) return false;

    // 2) Parse the top‐level list
    List<Object> respList = (List<Object>) JSON.deserializeUntyped(rawJson);
    if (respList.isEmpty()) return false;

    Map<String,Object> actionResp = (Map<String,Object>) respList[0];
    Map<String,Object> outputVals = (Map<String,Object>) actionResp.get('outputValues');
    if (outputVals == null ||
        !outputVals.containsKey('ocrDocumentScanResultDetails')) {
      return false;
    }

    // 3) Drill into the pages array
    Map<String,Object> detailsWrap = 
        (Map<String,Object>) outputVals.get('ocrDocumentScanResultDetails');
    // this key is the same one you used in your saver job
    List<Object> pages = (List<Object>) detailsWrap.get('ocrDocumentScanResults');
    if (pages == null || pages.isEmpty()) return false;

    // 4) Look for a non-blank Driving License Number on any page
    for (Object pg : pages) {
        Map<String,Object> pageMap = (Map<String,Object>) pg;
        List<Object> kvps = (List<Object>) pageMap.get('keyValuePairs');
        if (kvps == null) continue;

        for (Object kvp : kvps) {
            Map<String,Object> pair     = (Map<String,Object>) kvp;
            Map<String,Object> keyMap   = (Map<String,Object>) pair.get('key');
            Map<String,Object> valueMap = (Map<String,Object>) pair.get('value');
            if (keyMap == null || valueMap == null) continue;

            String label = ((String) keyMap.get('value')).toLowerCase();
            String text  = (String) valueMap.get('value');
            if (text == null || text.trim().isEmpty()) {
                continue;
            }

            // You can adjust this to match whatever label your IDR returns
            if (label.contains('driving') && label.contains('license') && text.trim().length() > 3) {
                return true;
            }
        }
    }

    // no DL number found → invalid
    return false;
}

