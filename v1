import { LightningElement, api } from 'lwc';
import { ShowToastEvent }       from 'lightning/platformShowToastEvent';
import validateDlImage          from '@salesforce/apex/DocumentProcessingController.validateDlImage';
import processFile              from '@salesforce/apex/DocumentProcessingController.processFile';

export default class DocumentChecklist extends LightningElement {
    @api recordId;

    // Only image formats
    acceptedFormats = ['.png','.jpg','.jpeg'];

    handleUploadFinished(event) {
        const files = event.detail.files;
        if (!files || !files.length) {
            return this.showToast('Error', 'Please upload a valid DL image', 'error');
        }
        const { documentId, name } = files[0];
        const lower = name.toLowerCase();
        if (
            !lower.endsWith('.png') &&
            !lower.endsWith('.jpg') &&
            !lower.endsWith('.jpeg')
        ) {
            return this.showToast('Invalid File', 'Please upload a PNG/JPG image', 'error');
        }

        // 1) Validate via OCR
        validateDlImage({ contentDocumentId: documentId })
            .then(isValid => {
                if (!isValid) {
                    return this.showToast('Invalid DL', 'Please upload a valid Driving License image', 'error');
                }
                // 2) Kick off async processing
                return processFile({ contentDocumentId: documentId, recordId: this.recordId });
            })
            .then(() => {
                // Only show if processFile ran
                this.showToast('Success', 'Driving license sent for processing', 'success');
            })
            .catch(error => {
                // Either validation or processing error
                console.error(error);
                this.showToast('Error', error.body?.message || 'There was a problem processing your DL', 'error');
            });
    }

    handleUploadError() {
        this.showToast('Upload Failed', 'Please upload a valid DL image', 'error');
    }

    showToast(title, message, variant) {
        this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
    }
}



 @AuraEnabled
    public static Boolean validateDlImage(Id contentDocumentId) {
        // 1) Retrieve the binary
        ContentVersion cv = [
            SELECT VersionData
            FROM ContentVersion
            WHERE ContentDocumentId = :contentDocumentId
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];
        if (cv == null) {
            return false;
        }

        // 2) Initiate OCR
        String ocrId = initiateTextExtraction(contentDocumentId);
        if (String.isBlank(ocrId)) {
            return false;
        }

        // 3) Fetch extracted JSON
        String rawJson = fetchExtractedText(ocrId, contentDocumentId);
        if (String.isBlank(rawJson)) {
            return false;
        }

        // 4) Simple pattern check: at least one alphanumeric block ≥4
        Pattern p = Pattern.compile('([A-Z0-9]{4,})');
        Matcher m = p.matcher(rawJson.toUpperCase());
        return m.find();
    }

    /** Enqueue the normal async processing job */
    @AuraEnabled
    public static void processFile(Id contentDocumentId, Id recordId) {
        System.enqueueJob(new ProcessDocumentJob(contentDocumentId, recordId));
    }

    // ————————————————————————————————————
    // OCR helper methods
    // ————————————————————————————————————

    private static String initiateTextExtraction(Id contentDocumentId) {
        Http        http = new Http();
        HttpRequest req  = new HttpRequest();
        String      endpoint = '/services/data/v58.0/actions/standard/initiateTextExtraction';

        Map<String,Object> input = new Map<String,Object>{
            'contentDocumentId' => contentDocumentId,
            'startPageIndex'    => 1,
            'endPageIndex'      => 20,
            'ocrService'        => 'AMAZON_TEXTRACT'
        };
        Map<String,Object> payload = new Map<String,Object>{
            'inputs' => new List<Object>{ input }
        };

        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Content-Type','application/json');
        req.setHeader('Authorization','Bearer ' + UserInfo.getSessionId());
        req.setBody(JSON.serialize(payload));

        HttpResponse resp = http.send(req);
        if (resp.getStatusCode() != 200) {
            return null;
        }

        List<Object> respList = (List<Object>) JSON.deserializeUntyped(resp.getBody());
        if (respList.isEmpty()) return null;

        Map<String,Object> first = (Map<String,Object>) respList[0];
        Map<String,Object> out   = (Map<String,Object>) first.get('outputValues');
        Map<String,Object> details = (Map<String,Object>) out.get('ocrDocumentScanResultDetails');
        List<Object> results = (List<Object>) details.get('ocrDocumentScanResults');
        if (results.isEmpty()) return null;

        return (String) ((Map<String,Object>)results[0]).get('ocrDocumentScanResultId');
    }

    private static String fetchExtractedText(String ocrResultId, Id contentDocumentId) {
        Http        http = new Http();
        HttpRequest req  = new HttpRequest();
        String      endpoint = '/services/data/v58.0/actions/standard/fetchExtractedText';

        Map<String,Object> single = new Map<String,Object>{
            'ocrDocumentScanResultId' => ocrResultId,
            'contentDocumentId'       => contentDocumentId,
            'startPageIndex'          => 1,
            'endPageIndex'            => 20
        };
        Map<String,Object> payload = new Map<String,Object>{
            'inputs' => new List<Object>{ single }
        };

        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Content-Type','application/json');
        req.setHeader('Authorization','Bearer ' + UserInfo.getSessionId());
        req.setBody(JSON.serialize(payload));

        HttpResponse resp = http.send(req);
        return (resp.getStatusCode() == 200) ? resp.getBody() : null;
    }


 // Initiate OCR asynchronously
        String ocrId = DocumentProcessingController.initiateTextExtraction(contentDocumentId);
        if (ocrId != null) {
            // Delay by 1 minute to let OCR complete
            System.enqueueJob(new FetchExtractedTextWithDelayJob(ocrId, contentDocumentId), 1);
        }
