public with sharing class AccountController {
    
    @AuraEnabled(cacheable=true)
    public static List<Account> getAccounts() {
        return [
            SELECT Id, Name 
            FROM Account 
            LIMIT 100
        ];
    }

    @AuraEnabled(cacheable=true)
    public static AccountDetails getAccountDetails(Id accountId) {
        AccountDetails details = new AccountDetails();

        Account acc = [
            SELECT Id, Name, DBA__c, Industry, NumberOfEmployees, AnnualRevenue, 
                   Net_Profit__c, Legal_Entity__c, Start_Date__c, BillingAddress, Comment__c
            FROM Account 
            WHERE Id = :accountId 
            LIMIT 1
        ];

        details.companyName = acc.Name;
        details.dba = acc.DBA__c;
        details.industry = acc.Industry;
        details.employees = acc.NumberOfEmployees;
        details.annualRevenue = String.valueOf(acc.AnnualRevenue);
        details.netProfit = String.valueOf(acc.Net_Profit__c);
        details.legalEntity = acc.Legal_Entity__c;
        details.startDate = acc.Start_Date__c;
        details.address = acc.BillingAddress != null ? acc.BillingAddress.street : '';
        details.comment = acc.Comment__c;

        return details;
    }

    public class AccountDetails {
        @AuraEnabled public String companyName;
        @AuraEnabled public String dba;
        @AuraEnabled public String industry;
        @AuraEnabled public String employees;
        @AuraEnabled public String annualRevenue;
        @AuraEnabled public String netProfit;
        @AuraEnabled public String legalEntity;
        @AuraEnabled public Date startDate;
        @AuraEnabled public String address;
        @AuraEnabled public String comment;
    }

    @AuraEnabled
    public static Id createApplicantFromAccount(AccountDetails accDetails) {
        Applicant__c app = new Applicant__c();
        app.Company_Name__c = accDetails.companyName;
        app.DBA__c = accDetails.dba;
        app.Industry__c = accDetails.industry;
        app.Employees__c = accDetails.employees != null ? Integer.valueOf(accDetails.employees) : null;
        app.Annual_Revenue__c = accDetails.annualRevenue != null ? Decimal.valueOf(accDetails.annualRevenue) : null;
        app.Net_Profit__c = accDetails.netProfit != null ? Decimal.valueOf(accDetails.netProfit) : null;
        app.Legal_Entity__c = accDetails.legalEntity;
        app.Start_Date__c = accDetails.startDate;
        app.Comment__c = accDetails.comment;
        
        insert app;
        return app.Id;
    }
}

<!-- Account Lookup -->
<template>
    <lightning-card title="Borrowers / Guarantors">

        <!-- Account Lookup -->
        <div class="slds-m-around_medium">
            <lightning-combobox
                name="accountLookup"
                label="Select Existing Business Relationship Record"
                value={selectedAccount}
                options={accountOptions}
                onchange={handleAccountChange}
                placeholder="Search Accounts..."
                class="slds-size_1-of-1">
            </lightning-combobox>
        </div>

        <!-- Form Fields -->
        <div class="slds-grid slds-wrap slds-m-around_medium">

            <lightning-input class="slds-size_1-of-2"
                label="Company Name"
                value={formData.companyName}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="DBA"
                value={formData.dba}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="Industry"
                value={formData.industry}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="Employees"
                value={formData.employees}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="Annual Revenue"
                value={formData.annualRevenue}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="Net Profit"
                value={formData.netProfit}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                label="Legal Entity"
                value={formData.legalEntity}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-2"
                type="date"
                label="Company Start Date"
                value={formData.startDate}
                disabled>
            </lightning-input>

            <lightning-input class="slds-size_1-of-1"
                label="Company Address"
                value={formData.address}
                disabled>
            </lightning-input>

            <lightning-textarea class="slds-size_1-of-1"
                label="Comment"
                value={formData.comment}
                disabled>
            </lightning-textarea>
        </div>

    </lightning-card>
</template>


import { LightningElement, track, wire } from 'lwc';
import getAccounts from '@salesforce/apex/AccountController.getAccounts';
import getAccountDetails from '@salesforce/apex/AccountController.getAccountDetails';

export default class AccountApplicantForm extends LightningElement {
    @track accountOptions = [];
    @track formData = {};
    selectedAccount;

    // Load Accounts for lookup
    @wire(getAccounts)
    wiredAccounts({ data, error }) {
        if (data) {
            this.accountOptions = data.map(acc => ({
                label: acc.Name,
                value: acc.Id
            }));
        } else if (error) {
            console.error('Error fetching accounts: ', error);
        }
    }

    // Handle account selection
    handleAccountChange(event) {
        this.selectedAccount = event.detail.value;
        this.fetchAccountDetails(this.selectedAccount);
    }

    // Fetch details for selected account
    async fetchAccountDetails(accountId) {
        try {
            let result = await getAccountDetails({ accountId });
            this.formData = result;
        } catch (error) {
            console.error('Error fetching account details: ', error);
        }
    }
}




